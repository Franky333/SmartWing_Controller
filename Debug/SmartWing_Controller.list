
SmartWing_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080044f0  080044f0  000144f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080045f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006c0  20000010  08004600  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006d0  08004600  000206d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028471  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000042fe  00000000  00000000  000484af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000dc5a  00000000  00000000  0004c7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fc8  00000000  00000000  0005a408  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015b8  00000000  00000000  0005b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a1ac  00000000  00000000  0005c988  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000071a0  00000000  00000000  00066b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006dcd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002de0  00000000  00000000  0006dd50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080044d8 	.word	0x080044d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080044d8 	.word	0x080044d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_InitTick+0x3c>)
{
 80005ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_InitTick+0x40>)
 80005f0:	7818      	ldrb	r0, [r3, #0]
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f890 	bl	8000724 <HAL_SYSTICK_Config>
 8000604:	4604      	mov	r4, r0
 8000606:	b958      	cbnz	r0, 8000620 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	2d0f      	cmp	r5, #15
 800060a:	d809      	bhi.n	8000620 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	4602      	mov	r2, r0
 800060e:	4629      	mov	r1, r5
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000614:	f000 f840 	bl	8000698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_InitTick+0x44>)
 800061a:	4620      	mov	r0, r4
 800061c:	601d      	str	r5, [r3, #0]
 800061e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000622:	bd38      	pop	{r3, r4, r5, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_Init>:
{
 8000630:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 f81e 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd5 	bl	80005e8 <HAL_InitTick>
 800063e:	4604      	mov	r4, r0
 8000640:	b918      	cbnz	r0, 800064a <HAL_Init+0x1a>
  HAL_MspInit();
 8000642:	f003 fc8b 	bl	8003f5c <HAL_MspInit>
}
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800064a:	2401      	movs	r4, #1
 800064c:	e7fb      	b.n	8000646 <HAL_Init+0x16>
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000002c 	.word	0x2000002c
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c

08000674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000676:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800067a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000682:	041b      	lsls	r3, r3, #16
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800068e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000690:	60d3      	str	r3, [r2, #12]
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	68dc      	ldr	r4, [r3, #12]
 800069e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	bf28      	it	cs
 80006ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b4:	bf8c      	ite	hi
 80006b6:	3c03      	subhi	r4, #3
 80006b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ba:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006c4:	ea01 0103 	and.w	r1, r1, r3
 80006c8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	fa05 f404 	lsl.w	r4, r5, r4
 80006d0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80006d4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	ea42 0201 	orr.w	r2, r2, r1
 80006dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006e0:	db07      	blt.n	80006f2 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006ec:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006f0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	f000 000f 	and.w	r0, r0, #15
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_NVIC_SetPriority+0x6c>)
 80006fa:	541a      	strb	r2, [r3, r0]
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	e000ed14 	.word	0xe000ed14

08000708 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000708:	2800      	cmp	r0, #0
 800070a:	db08      	blt.n	800071e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800070c:	0942      	lsrs	r2, r0, #5
 800070e:	2301      	movs	r3, #1
 8000710:	f000 001f 	and.w	r0, r0, #31
 8000714:	fa03 f000 	lsl.w	r0, r3, r0
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <HAL_NVIC_EnableIRQ+0x18>)
 800071a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100

08000724 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	3801      	subs	r0, #1
 8000726:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800072a:	d20a      	bcs.n	8000742 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000752:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	bf0c      	ite	eq
 8000758:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800075c:	f022 0204 	bicne.w	r2, r2, #4
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	4770      	bx	lr
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000768:	4770      	bx	lr

0800076a <HAL_SYSTICK_IRQHandler>:
{
 800076a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800076c:	f7ff fffc 	bl	8000768 <HAL_SYSTICK_Callback>
 8000770:	bd08      	pop	{r3, pc}
	...

08000774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000774:	b510      	push	{r4, lr}
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000776:	b128      	cbz	r0, 8000784 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000778:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800077c:	2b02      	cmp	r3, #2
 800077e:	d003      	beq.n	8000788 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000784:	2001      	movs	r0, #1
 8000786:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000788:	6803      	ldr	r3, [r0, #0]
 800078a:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <HAL_DMA_Abort_IT+0x84>)
 800078c:	441a      	add	r2, r3
 800078e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000792:	d808      	bhi.n	80007a6 <HAL_DMA_Abort_IT+0x32>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000794:	2204      	movs	r2, #4
 8000796:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	f022 0201 	bic.w	r2, r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 80007a2:	2000      	movs	r0, #0
 80007a4:	bd10      	pop	{r4, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	f022 020e 	bic.w	r2, r2, #14
 80007ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	f022 0201 	bic.w	r2, r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007b6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80007b8:	6813      	ldr	r3, [r2, #0]
 80007ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007be:	6013      	str	r3, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80007c0:	2301      	movs	r3, #1
 80007c2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80007c4:	4093      	lsls	r3, r2
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <HAL_DMA_Abort_IT+0x88>)
 80007c8:	6053      	str	r3, [r2, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80007cc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80007ce:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80007d0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80007d2:	b133      	cbz	r3, 80007e2 <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007da:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80007de:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80007e0:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80007e2:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80007e4:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80007e6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80007ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80007ec:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0d6      	beq.n	80007a2 <HAL_DMA_Abort_IT+0x2e>
        hdma->XferAbortCallback(hdma);
 80007f4:	4798      	blx	r3
 80007f6:	e7d4      	b.n	80007a2 <HAL_DMA_Abort_IT+0x2e>
 80007f8:	bffdfff0 	.word	0xbffdfff0
 80007fc:	58025400 	.word	0x58025400

08000800 <HAL_FDCAN_Init>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef* hfdcan)
{
 8000800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tickstart = 0U;

  /* Check FDCAN handle */
  if(hfdcan == NULL)
 8000804:	4604      	mov	r4, r0
 8000806:	2800      	cmp	r0, #0
 8000808:	f000 8192 	beq.w	8000b30 <HAL_FDCAN_Init+0x330>
  {
     return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if(hfdcan->Instance == FDCAN1)
 800080c:	4bcd      	ldr	r3, [pc, #820]	; (8000b44 <HAL_FDCAN_Init+0x344>)
 800080e:	6802      	ldr	r2, [r0, #0]
 8000810:	429a      	cmp	r2, r3
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100);
 8000812:	bf04      	itt	eq
 8000814:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8000818:	6043      	streq	r3, [r0, #4]
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

  if(hfdcan->State == HAL_FDCAN_STATE_RESET)
 800081a:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 800081e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000822:	b91b      	cbnz	r3, 800082c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000824:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95

    /* Init the low level hardware */
    HAL_FDCAN_MspInit(hfdcan);
 8000828:	f002 fe9c 	bl	8003564 <HAL_FDCAN_MspInit>
  }

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800082c:	6822      	ldr	r2, [r4, #0]
 800082e:	6993      	ldr	r3, [r2, #24]
 8000830:	f023 0310 	bic.w	r3, r3, #16
 8000834:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000836:	f7ff ff17 	bl	8000668 <HAL_GetTick>
 800083a:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	699a      	ldr	r2, [r3, #24]
 8000840:	0711      	lsls	r1, r2, #28
 8000842:	f100 8166 	bmi.w	8000b12 <HAL_FDCAN_Init+0x312>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000846:	699a      	ldr	r2, [r3, #24]
 8000848:	f042 0201 	orr.w	r2, r2, #1
 800084c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800084e:	f7ff ff0b 	bl	8000668 <HAL_GetTick>
 8000852:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	699a      	ldr	r2, [r3, #24]
 8000858:	07d2      	lsls	r2, r2, #31
 800085a:	f140 816c 	bpl.w	8000b36 <HAL_FDCAN_Init+0x336>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800085e:	699a      	ldr	r2, [r3, #24]
 8000860:	f042 0202 	orr.w	r2, r2, #2
 8000864:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if(hfdcan->Init.AutoRetransmission == ENABLE)
 8000866:	7c22      	ldrb	r2, [r4, #16]
 8000868:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800086a:	699a      	ldr	r2, [r3, #24]
 800086c:	bf0c      	ite	eq
 800086e:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000872:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8000876:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if(hfdcan->Init.TransmitPause == ENABLE)
 8000878:	7c62      	ldrb	r2, [r4, #17]
 800087a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800087c:	699a      	ldr	r2, [r3, #24]
 800087e:	bf0c      	ite	eq
 8000880:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000884:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8000888:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if(hfdcan->Init.ProtocolException == ENABLE)
 800088a:	7ca2      	ldrb	r2, [r4, #18]
 800088c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800088e:	699a      	ldr	r2, [r3, #24]
 8000890:	bf0c      	ite	eq
 8000892:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000896:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800089a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	68a0      	ldr	r0, [r4, #8]
 80008a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008a4:	4302      	orrs	r2, r0
 80008a6:	619a      	str	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if(hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80008a8:	68e2      	ldr	r2, [r4, #12]
 80008aa:	2a01      	cmp	r2, #1
 80008ac:	f040 8152 	bne.w	8000b54 <HAL_FDCAN_Init+0x354>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	f042 0204 	orr.w	r2, r2, #4
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80008b6:	619a      	str	r2, [r3, #24]
    }
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80008b8:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));

  /* If FD operation with BRS is selected, set the data bit timing register */
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80008ba:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80008be:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 80008c2:	69e2      	ldr	r2, [r4, #28]
 80008c4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80008cc:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 80008d0:	6a21      	ldr	r1, [r4, #32]
 80008d2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 80008d6:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));
 80008da:	6961      	ldr	r1, [r4, #20]
 80008dc:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 80008e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 80008e4:	61da      	str	r2, [r3, #28]
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80008e6:	d10e      	bne.n	8000906 <HAL_FDCAN_Init+0x106>
  {
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80008e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008ea:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 80008ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80008ee:	3a01      	subs	r2, #1
 80008f0:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80008f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 80008f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80008f8:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80008fa:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1) << 16));
 80008fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008fe:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 8000900:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 8000904:	60da      	str	r2, [r3, #12]
  }

  if(hfdcan->Init.TxFifoQueueElmtsNbr > 0)
 8000906:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000908:	b12e      	cbz	r6, 8000916 <HAL_FDCAN_Init+0x116>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800090a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800090e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000910:	430a      	orrs	r2, r1
 8000912:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
 8000916:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000918:	42c6      	cmn	r6, r0
 800091a:	d009      	beq.n	8000930 <HAL_FDCAN_Init+0x130>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800091c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8000920:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000922:	4d89      	ldr	r5, [pc, #548]	; (8000b48 <HAL_FDCAN_Init+0x348>)
 8000924:	f021 0107 	bic.w	r1, r1, #7
 8000928:	5caa      	ldrb	r2, [r5, r2]
 800092a:	430a      	orrs	r2, r1
 800092c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if(hfdcan->Init.RxFifo0ElmtsNbr > 0)
 8000930:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
 8000934:	f1b8 0f00 	cmp.w	r8, #0
 8000938:	d009      	beq.n	800094e <HAL_FDCAN_Init+0x14e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, CvtEltSize[hfdcan->Init.RxFifo0ElmtSize]);
 800093a:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800093e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000940:	4d81      	ldr	r5, [pc, #516]	; (8000b48 <HAL_FDCAN_Init+0x348>)
 8000942:	f021 0107 	bic.w	r1, r1, #7
 8000946:	5caa      	ldrb	r2, [r5, r2]
 8000948:	430a      	orrs	r2, r1
 800094a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if(hfdcan->Init.RxFifo1ElmtsNbr > 0)
 800094e:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 8000952:	f1bc 0f00 	cmp.w	ip, #0
 8000956:	d00a      	beq.n	800096e <HAL_FDCAN_Init+0x16e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << 4));
 8000958:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800095c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800095e:	4d7a      	ldr	r5, [pc, #488]	; (8000b48 <HAL_FDCAN_Init+0x348>)
 8000960:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000964:	5c69      	ldrb	r1, [r5, r1]
 8000966:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800096a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if(hfdcan->Init.RxBuffersNbr > 0)
 800096e:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 8000972:	f1ba 0f00 	cmp.w	sl, #0
 8000976:	d00a      	beq.n	800098e <HAL_FDCAN_Init+0x18e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << 8));
 8000978:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800097c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800097e:	4d72      	ldr	r5, [pc, #456]	; (8000b48 <HAL_FDCAN_Init+0x348>)
 8000980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000984:	5c69      	ldrb	r1, [r5, r1]
 8000986:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800098a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if(hfdcan->Instance == FDCAN1)
 800098e:	4a6d      	ldr	r2, [pc, #436]	; (8000b44 <HAL_FDCAN_Init+0x344>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d104      	bne.n	800099e <HAL_FDCAN_Init+0x19e>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8000994:	6861      	ldr	r1, [r4, #4]
 8000996:	688a      	ldr	r2, [r1, #8]
 8000998:	f022 0203 	bic.w	r2, r2, #3
 800099c:	608a      	str	r2, [r1, #8]
  uint32_t RAMcounter;

  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 800099e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80009a2:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8000b50 <HAL_FDCAN_Init+0x350>
  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;
 80009a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 80009a8:	ea02 020e 	and.w	r2, r2, lr
  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 80009ac:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 80009b0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80009b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 80009b8:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 80009bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009be:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
 80009c2:	188f      	adds	r7, r1, r2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 80009c4:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 80009c8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 80009cc:	f501 512c 	add.w	r1, r1, #11008	; 0x2b00
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 80009d0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 80009d4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 80009d8:	0089      	lsls	r1, r1, #2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 80009da:	ea05 050e 	and.w	r5, r5, lr
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 80009de:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 80009e2:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2);
 80009e6:	eb07 0749 	add.w	r7, r7, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 80009ea:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 80009ee:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80009f2:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
 80009f6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80009fa:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (hfdcan->msgRam.RxFIFO0SA << 2));
 80009fe:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8000a02:	ea05 050e 	and.w	r5, r5, lr
 8000a06:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 8000a0a:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << 16));
 8000a0e:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8000a12:	f425 05fe 	bic.w	r5, r5, #8323072	; 0x7f0000
 8000a16:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8000a1a:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8000a1e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000a20:	fb05 f808 	mul.w	r8, r5, r8
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 8000a24:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8000a28:	4447      	add	r7, r8
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 8000a2a:	f025 05fc 	bic.w	r5, r5, #252	; 0xfc
 8000a2e:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 8000a32:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << 16));
 8000a36:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8000a3a:	f425 05fe 	bic.w	r5, r5, #8323072	; 0x7f0000
 8000a3e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a42:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8000a46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8000a48:	fb05 fc0c 	mul.w	ip, r5, ip
 8000a4c:	eb07 050c 	add.w	r5, r7, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (hfdcan->msgRam.RxBufferSA << 2));
 8000a50:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 8000a54:	f027 07fc 	bic.w	r7, r7, #252	; 0xfc
 8000a58:	ea47 0785 	orr.w	r7, r7, r5, lsl #2
 8000a5c:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8000a60:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8000a62:	fb07 f70a 	mul.w	r7, r7, sl
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8000a66:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8000a6a:	443d      	add	r5, r7
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8000a6c:	ea0a 0e0e 	and.w	lr, sl, lr
 8000a70:	ea4e 0e85 	orr.w	lr, lr, r5, lsl #2
 8000a74:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8000a78:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
 8000a7c:	f8d4 e058 	ldr.w	lr, [r4, #88]	; 0x58
 8000a80:	f42a 1a7c 	bic.w	sl, sl, #4128768	; 0x3f0000
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2);
 8000a84:	eb05 0b4e 	add.w	fp, r5, lr, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8000a88:	ea4a 4a0e 	orr.w	sl, sl, lr, lsl #16
 8000a8c:	f8c3 a0f0 	str.w	sl, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (hfdcan->msgRam.TxBufferSA << 2));
 8000a90:	f8d3 a0c0 	ldr.w	sl, [r3, #192]	; 0xc0
 8000a94:	f02a 05fc 	bic.w	r5, sl, #252	; 0xfc
 8000a98:	ea45 058b 	orr.w	r5, r5, fp, lsl #2
 8000a9c:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << 16));
 8000aa0:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 8000aa4:	f425 157c 	bic.w	r5, r5, #4128768	; 0x3f0000
 8000aa8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000aac:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8000ab0:	f8d3 a0c0 	ldr.w	sl, [r3, #192]	; 0xc0
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 8000ab4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8000ab6:	f02a 5a7c 	bic.w	sl, sl, #1056964608	; 0x3f000000
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 8000aba:	4368      	muls	r0, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8000abc:	ea4a 6a06 	orr.w	sl, sl, r6, lsl #24
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8000ac0:	4375      	muls	r5, r6
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8000ac2:	f8c3 a0c0 	str.w	sl, [r3, #192]	; 0xc0
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 8000ac6:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8000ac8:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8000acc:	66e1      	str	r1, [r4, #108]	; 0x6c
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8000ace:	6762      	str	r2, [r4, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8000ad0:	eb02 0288 	add.w	r2, r2, r8, lsl #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 8000ad4:	eb02 038c 	add.w	r3, r2, ip, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8000ad8:	67a2      	str	r2, [r4, #120]	; 0x78

  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_FDCAN_Init+0x34c>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 8000adc:	67e3      	str	r3, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
 8000ade:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8000ae2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
 8000ae6:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8000aea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);
 8000aee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000af2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8000af6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8000afa:	4293      	cmp	r3, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8000afc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8000b00:	d83c      	bhi.n	8000b7c <HAL_FDCAN_Init+0x37c>
  else
  {
    /* Flush the allocated Message RAM area */
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
    {
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 8000b02:	2200      	movs	r2, #0
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 8000b04:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	d23d      	bcs.n	8000b88 <HAL_FDCAN_Init+0x388>
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 8000b0c:	f841 2b04 	str.w	r2, [r1], #4
 8000b10:	e7f8      	b.n	8000b04 <HAL_FDCAN_Init+0x304>
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b12:	f7ff fda9 	bl	8000668 <HAL_GetTick>
 8000b16:	1b40      	subs	r0, r0, r5
 8000b18:	280a      	cmp	r0, #10
 8000b1a:	f67f ae8f 	bls.w	800083c <HAL_FDCAN_Init+0x3c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b1e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
     return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
}
 8000b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b36:	f7ff fd97 	bl	8000668 <HAL_GetTick>
 8000b3a:	1b40      	subs	r0, r0, r5
 8000b3c:	280a      	cmp	r0, #10
 8000b3e:	f67f ae89 	bls.w	8000854 <HAL_FDCAN_Init+0x54>
 8000b42:	e7ec      	b.n	8000b1e <HAL_FDCAN_Init+0x31e>
 8000b44:	4000a000 	.word	0x4000a000
 8000b48:	080044f0 	.word	0x080044f0
 8000b4c:	4000b5fc 	.word	0x4000b5fc
 8000b50:	ffff0003 	.word	0xffff0003
  else if(hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	f43f aeaf 	beq.w	80008b8 <HAL_FDCAN_Init+0xb8>
    if(hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b5a:	2a02      	cmp	r2, #2
 8000b5c:	d00a      	beq.n	8000b74 <HAL_FDCAN_Init+0x374>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b5e:	6999      	ldr	r1, [r3, #24]
      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b60:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b62:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000b66:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b68:	6919      	ldr	r1, [r3, #16]
 8000b6a:	f041 0110 	orr.w	r1, r1, #16
 8000b6e:	6119      	str	r1, [r3, #16]
      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b70:	f47f aea2 	bne.w	80008b8 <HAL_FDCAN_Init+0xb8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	f042 0220 	orr.w	r2, r2, #32
 8000b7a:	e69c      	b.n	80008b6 <HAL_FDCAN_Init+0xb6>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8000b7c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b88:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b8a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b8c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b90:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8000b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9c:	680b      	ldr	r3, [r1, #0]
{
 8000b9e:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d64 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba4:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba8:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000baa:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 8000bac:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000d68 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000bb0:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000bb4:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 8000bba:	42af      	cmp	r7, r5
 8000bbc:	f040 80b7 	bne.w	8000d2e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc0:	684a      	ldr	r2, [r1, #4]
 8000bc2:	f022 0610 	bic.w	r6, r2, #16
 8000bc6:	2e02      	cmp	r6, #2
 8000bc8:	d116      	bne.n	8000bf8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000bca:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bce:	f003 0b07 	and.w	fp, r3, #7
 8000bd2:	f04f 0e0f 	mov.w	lr, #15
 8000bd6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000bda:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000bde:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000be2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000be6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bea:	690c      	ldr	r4, [r1, #16]
 8000bec:	fa04 f40b 	lsl.w	r4, r4, fp
 8000bf0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000bf4:	f8ca 4020 	str.w	r4, [sl, #32]
 8000bf8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bfc:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000bfe:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c02:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c06:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0a:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c0c:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c10:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c12:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c14:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c18:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000c1c:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c20:	d810      	bhi.n	8000c44 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 8000c22:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c24:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c28:	68ce      	ldr	r6, [r1, #12]
 8000c2a:	fa06 fe0a 	lsl.w	lr, r6, sl
 8000c2e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000c32:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c34:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c36:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c3a:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000c3e:	409e      	lsls	r6, r3
 8000c40:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000c42:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c44:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c46:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c48:	688e      	ldr	r6, [r1, #8]
 8000c4a:	fa06 f60a 	lsl.w	r6, r6, sl
 8000c4e:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000c50:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	00d4      	lsls	r4, r2, #3
 8000c54:	d56b      	bpl.n	8000d2e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000c5a:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c5e:	f003 0703 	and.w	r7, r3, #3
 8000c62:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	f044 0402 	orr.w	r4, r4, #2
 8000c6a:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c6e:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000c74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c78:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000c7c:	f004 0402 	and.w	r4, r4, #2
 8000c80:	9403      	str	r4, [sp, #12]
 8000c82:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c84:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000c88:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c8c:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c90:	4c33      	ldr	r4, [pc, #204]	; (8000d60 <HAL_GPIO_Init+0x1c8>)
 8000c92:	42a0      	cmp	r0, r4
 8000c94:	d052      	beq.n	8000d3c <HAL_GPIO_Init+0x1a4>
 8000c96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c9a:	42a0      	cmp	r0, r4
 8000c9c:	d050      	beq.n	8000d40 <HAL_GPIO_Init+0x1a8>
 8000c9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ca2:	42a0      	cmp	r0, r4
 8000ca4:	d04e      	beq.n	8000d44 <HAL_GPIO_Init+0x1ac>
 8000ca6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000caa:	42a0      	cmp	r0, r4
 8000cac:	d04c      	beq.n	8000d48 <HAL_GPIO_Init+0x1b0>
 8000cae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cb2:	42a0      	cmp	r0, r4
 8000cb4:	d04a      	beq.n	8000d4c <HAL_GPIO_Init+0x1b4>
 8000cb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cba:	42a0      	cmp	r0, r4
 8000cbc:	d048      	beq.n	8000d50 <HAL_GPIO_Init+0x1b8>
 8000cbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cc2:	42a0      	cmp	r0, r4
 8000cc4:	d046      	beq.n	8000d54 <HAL_GPIO_Init+0x1bc>
 8000cc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cca:	42a0      	cmp	r0, r4
 8000ccc:	d044      	beq.n	8000d58 <HAL_GPIO_Init+0x1c0>
 8000cce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cd2:	42a0      	cmp	r0, r4
 8000cd4:	d042      	beq.n	8000d5c <HAL_GPIO_Init+0x1c4>
 8000cd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cda:	42a0      	cmp	r0, r4
 8000cdc:	bf14      	ite	ne
 8000cde:	240a      	movne	r4, #10
 8000ce0:	2409      	moveq	r4, #9
 8000ce2:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce4:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce6:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cea:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000cf0:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000cf4:	bf54      	ite	pl
 8000cf6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000cf8:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfa:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 8000cfc:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000d00:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d04:	bf54      	ite	pl
 8000d06:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000d08:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0a:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000d0c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000d10:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000d14:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000d18:	bf54      	ite	pl
 8000d1a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000d1c:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1e:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000d20:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000d22:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d24:	bf54      	ite	pl
 8000d26:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d28:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 8000d2a:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d2e:	3301      	adds	r3, #1
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	f47f af3d 	bne.w	8000bb0 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 8000d36:	b005      	add	sp, #20
 8000d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	e7d0      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d40:	2401      	movs	r4, #1
 8000d42:	e7ce      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d44:	2402      	movs	r4, #2
 8000d46:	e7cc      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d48:	2403      	movs	r4, #3
 8000d4a:	e7ca      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d4c:	2404      	movs	r4, #4
 8000d4e:	e7c8      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d50:	2405      	movs	r4, #5
 8000d52:	e7c6      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d54:	2406      	movs	r4, #6
 8000d56:	e7c4      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d58:	2407      	movs	r4, #7
 8000d5a:	e7c2      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d5c:	2408      	movs	r4, #8
 8000d5e:	e7c0      	b.n	8000ce2 <HAL_GPIO_Init+0x14a>
 8000d60:	58020000 	.word	0x58020000
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58000080 	.word	0x58000080

08000d6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d6c:	6903      	ldr	r3, [r0, #16]
 8000d6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d70:	bf14      	ite	ne
 8000d72:	2001      	movne	r0, #1
 8000d74:	2000      	moveq	r0, #0
 8000d76:	4770      	bx	lr

08000d78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d78:	b10a      	cbz	r2, 8000d7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000d7a:	8301      	strh	r1, [r0, #24]
 8000d7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000d7e:	8341      	strh	r1, [r0, #26]
 8000d80:	4770      	bx	lr

08000d82 <HAL_I2C_Init>:
  * @param  hi2c: Pointer to a I2C_HandleTypeDef structure that contains
  *               the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d82:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000d84:	4604      	mov	r4, r0
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d04a      	beq.n	8000e20 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000d8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d92:	b91b      	cbnz	r3, 8000d9c <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d94:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d98:	f002 fdc6 	bl	8003928 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d9c:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d9e:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000da0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000da4:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000db0:	6862      	ldr	r2, [r4, #4]
 8000db2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dc2:	d124      	bne.n	8000e0e <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dc8:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dca:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dcc:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dce:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dd8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000de0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000de2:	6922      	ldr	r2, [r4, #16]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	69a1      	ldr	r1, [r4, #24]
 8000de8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dec:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000df0:	69e2      	ldr	r2, [r4, #28]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f042 0201 	orr.w	r2, r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000dfe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e00:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e06:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000e0c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e12:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e14:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e16:	d1d8      	bne.n	8000dca <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	e7d4      	b.n	8000dca <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000e20:	2001      	movs	r0, #1
}
 8000e22:	bd10      	pop	{r4, pc}

08000e24 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e24:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	2a20      	cmp	r2, #32
{
 8000e2c:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e2e:	d11d      	bne.n	8000e6c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e30:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d019      	beq.n	8000e6c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e38:	2324      	movs	r3, #36	; 0x24
 8000e3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	681c      	ldr	r4, [r3, #0]
 8000e42:	f024 0401 	bic.w	r4, r4, #1
 8000e46:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e48:	681c      	ldr	r4, [r3, #0]
 8000e4a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000e4e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e50:	681c      	ldr	r4, [r3, #0]
 8000e52:	4321      	orrs	r1, r4
 8000e54:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e56:	6819      	ldr	r1, [r3, #0]
 8000e58:	f041 0101 	orr.w	r1, r1, #1
 8000e5c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e5e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e60:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e68:	4618      	mov	r0, r3
 8000e6a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000e6c:	2002      	movs	r0, #2
  }
}
 8000e6e:	bd10      	pop	{r4, pc}

08000e70 <HAL_I2CEx_ConfigDigitalFilter>:
  *               the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter: Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e70:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e72:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000e76:	b2e4      	uxtb	r4, r4
 8000e78:	2c20      	cmp	r4, #32
 8000e7a:	d11c      	bne.n	8000eb6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d018      	beq.n	8000eb6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e84:	2324      	movs	r3, #36	; 0x24
 8000e86:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e8a:	6803      	ldr	r3, [r0, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e94:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e96:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e9a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e9e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ea8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000eaa:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000eae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000eb6:	2002      	movs	r0, #2
  }
}
 8000eb8:	bd10      	pop	{r4, pc}
	...

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	6803      	ldr	r3, [r0, #0]
{
 8000ec0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec2:	07d8      	lsls	r0, r3, #31
 8000ec4:	d45c      	bmi.n	8000f80 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	0799      	lsls	r1, r3, #30
 8000eca:	f100 80af 	bmi.w	800102c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000ece:	682b      	ldr	r3, [r5, #0]
 8000ed0:	06d9      	lsls	r1, r3, #27
 8000ed2:	d525      	bpl.n	8000f20 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000ed4:	4bac      	ldr	r3, [pc, #688]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000edc:	2a08      	cmp	r2, #8
 8000ede:	d00b      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x3c>
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ee6:	2a18      	cmp	r2, #24
 8000ee8:	f040 80f7 	bne.w	80010da <HAL_RCC_OscConfig+0x21e>
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	f040 80f1 	bne.w	80010da <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ef8:	4ba3      	ldr	r3, [pc, #652]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	05d2      	lsls	r2, r2, #23
 8000efe:	d502      	bpl.n	8000f06 <HAL_RCC_OscConfig+0x4a>
 8000f00:	69ea      	ldr	r2, [r5, #28]
 8000f02:	2a80      	cmp	r2, #128	; 0x80
 8000f04:	d153      	bne.n	8000fae <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f06:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000f0c:	fa92 f2a2 	rbit	r2, r2
 8000f10:	fab2 f182 	clz	r1, r2
 8000f14:	6a2a      	ldr	r2, [r5, #32]
 8000f16:	408a      	lsls	r2, r1
 8000f18:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	0719      	lsls	r1, r3, #28
 8000f24:	f100 810b 	bmi.w	800113e <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	069a      	lsls	r2, r3, #26
 8000f2c:	f100 8130 	bmi.w	8001190 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	075c      	lsls	r4, r3, #29
 8000f34:	d51e      	bpl.n	8000f74 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f36:	4c95      	ldr	r4, [pc, #596]	; (800118c <HAL_RCC_OscConfig+0x2d0>)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000f40:	f7ff fb92 	bl	8000668 <HAL_GetTick>
 8000f44:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	05da      	lsls	r2, r3, #23
 8000f4a:	f140 8146 	bpl.w	80011da <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4e:	68ab      	ldr	r3, [r5, #8]
 8000f50:	4c8d      	ldr	r4, [pc, #564]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	f040 8148 	bne.w	80011e8 <HAL_RCC_OscConfig+0x32c>
 8000f58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f60:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f64:	f7ff fb80 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f68:	4e87      	ldr	r6, [pc, #540]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000f6a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000f6e:	079b      	lsls	r3, r3, #30
 8000f70:	f140 8160 	bpl.w	8001234 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f74:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	f040 8163 	bne.w	8001242 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f80:	4b81      	ldr	r3, [pc, #516]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000f88:	2a10      	cmp	r2, #16
 8000f8a:	d009      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe4>
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000f92:	2a18      	cmp	r2, #24
 8000f94:	d10d      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xf6>
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d108      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	4b79      	ldr	r3, [pc, #484]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	039a      	lsls	r2, r3, #14
 8000fa6:	d58e      	bpl.n	8000ec6 <HAL_RCC_OscConfig+0xa>
 8000fa8:	686b      	ldr	r3, [r5, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d18b      	bne.n	8000ec6 <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	686b      	ldr	r3, [r5, #4]
 8000fb4:	4c74      	ldr	r4, [pc, #464]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d112      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x126>
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fb50 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc8:	4c6f      	ldr	r4, [pc, #444]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000fca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	039b      	lsls	r3, r3, #14
 8000fd0:	f53f af79 	bmi.w	8000ec6 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fb48 	bl	8000668 <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	2864      	cmp	r0, #100	; 0x64
 8000fdc:	d9f6      	bls.n	8000fcc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe2:	b9a3      	cbnz	r3, 800100e <HAL_RCC_OscConfig+0x152>
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fea:	6023      	str	r3, [r4, #0]
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fb38 	bl	8000668 <HAL_GetTick>
 8000ff8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	039f      	lsls	r7, r3, #14
 8000ffe:	f57f af62 	bpl.w	8000ec6 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001002:	f7ff fb31 	bl	8000668 <HAL_GetTick>
 8001006:	1b80      	subs	r0, r0, r6
 8001008:	2864      	cmp	r0, #100	; 0x64
 800100a:	d9f6      	bls.n	8000ffa <HAL_RCC_OscConfig+0x13e>
 800100c:	e7e7      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	d103      	bne.n	800101e <HAL_RCC_OscConfig+0x162>
 8001016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101a:	6023      	str	r3, [r4, #0]
 800101c:	e7ce      	b.n	8000fbc <HAL_RCC_OscConfig+0x100>
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	6023      	str	r3, [r4, #0]
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	e7ca      	b.n	8000fc2 <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800102c:	4b56      	ldr	r3, [pc, #344]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 800102e:	68e9      	ldr	r1, [r5, #12]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001036:	d007      	beq.n	8001048 <HAL_RCC_OscConfig+0x18c>
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800103e:	2a18      	cmp	r2, #24
 8001040:	d128      	bne.n	8001094 <HAL_RCC_OscConfig+0x1d8>
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	079c      	lsls	r4, r3, #30
 8001046:	d125      	bne.n	8001094 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	0758      	lsls	r0, r3, #29
 800104e:	d501      	bpl.n	8001054 <HAL_RCC_OscConfig+0x198>
 8001050:	2900      	cmp	r1, #0
 8001052:	d0ac      	beq.n	8000fae <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001054:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	4c4c      	ldr	r4, [pc, #304]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001058:	f023 0319 	bic.w	r3, r3, #25
 800105c:	430b      	orrs	r3, r1
 800105e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001060:	f7ff fb02 	bl	8000668 <HAL_GetTick>
 8001064:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	075b      	lsls	r3, r3, #29
 800106a:	d50d      	bpl.n	8001088 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	6861      	ldr	r1, [r4, #4]
 800106e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	fab3 f283 	clz	r2, r3
 800107a:	692b      	ldr	r3, [r5, #16]
 800107c:	4093      	lsls	r3, r2
 800107e:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 8001082:	4313      	orrs	r3, r2
 8001084:	6063      	str	r3, [r4, #4]
 8001086:	e722      	b.n	8000ece <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001088:	f7ff faee 	bl	8000668 <HAL_GetTick>
 800108c:	1b80      	subs	r0, r0, r6
 800108e:	2802      	cmp	r0, #2
 8001090:	d9e9      	bls.n	8001066 <HAL_RCC_OscConfig+0x1aa>
 8001092:	e7a4      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
 8001094:	4c3c      	ldr	r4, [pc, #240]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001096:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001098:	b179      	cbz	r1, 80010ba <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800109a:	f023 0319 	bic.w	r3, r3, #25
 800109e:	430b      	orrs	r3, r1
 80010a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010a2:	f7ff fae1 	bl	8000668 <HAL_GetTick>
 80010a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	075f      	lsls	r7, r3, #29
 80010ac:	d4de      	bmi.n	800106c <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fadb 	bl	8000668 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d9f7      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1ec>
 80010b8:	e791      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010c0:	f7ff fad2 	bl	8000668 <HAL_GetTick>
 80010c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	0758      	lsls	r0, r3, #29
 80010ca:	f57f af00 	bpl.w	8000ece <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff facb 	bl	8000668 <HAL_GetTick>
 80010d2:	1b80      	subs	r0, r0, r6
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f6      	bls.n	80010c6 <HAL_RCC_OscConfig+0x20a>
 80010d8:	e781      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80010da:	69eb      	ldr	r3, [r5, #28]
 80010dc:	4c2a      	ldr	r4, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 80010de:	b1eb      	cbz	r3, 800111c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010e8:	f7ff fabe 	bl	8000668 <HAL_GetTick>
 80010ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	05df      	lsls	r7, r3, #23
 80010f2:	d50d      	bpl.n	8001110 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010f4:	6861      	ldr	r1, [r4, #4]
 80010f6:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	fab3 f283 	clz	r2, r3
 8001102:	6a2b      	ldr	r3, [r5, #32]
 8001104:	4093      	lsls	r3, r2
 8001106:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 800110a:	4313      	orrs	r3, r2
 800110c:	6063      	str	r3, [r4, #4]
 800110e:	e707      	b.n	8000f20 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001110:	f7ff faaa 	bl	8000668 <HAL_GetTick>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	2802      	cmp	r0, #2
 8001118:	d9e9      	bls.n	80010ee <HAL_RCC_OscConfig+0x232>
 800111a:	e760      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001122:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001124:	f7ff faa0 	bl	8000668 <HAL_GetTick>
 8001128:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	05d8      	lsls	r0, r3, #23
 800112e:	f57f aef7 	bpl.w	8000f20 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001132:	f7ff fa99 	bl	8000668 <HAL_GetTick>
 8001136:	1b80      	subs	r0, r0, r6
 8001138:	2802      	cmp	r0, #2
 800113a:	d9f6      	bls.n	800112a <HAL_RCC_OscConfig+0x26e>
 800113c:	e74f      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800113e:	696b      	ldr	r3, [r5, #20]
 8001140:	4c11      	ldr	r4, [pc, #68]	; (8001188 <HAL_RCC_OscConfig+0x2cc>)
 8001142:	b183      	cbz	r3, 8001166 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8001144:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 800114c:	f7ff fa8c 	bl	8000668 <HAL_GetTick>
 8001150:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001154:	079b      	lsls	r3, r3, #30
 8001156:	f53f aee7 	bmi.w	8000f28 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fa85 	bl	8000668 <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	2802      	cmp	r0, #2
 8001162:	d9f6      	bls.n	8001152 <HAL_RCC_OscConfig+0x296>
 8001164:	e73b      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8001166:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 800116e:	f7ff fa7b 	bl	8000668 <HAL_GetTick>
 8001172:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001176:	079f      	lsls	r7, r3, #30
 8001178:	f57f aed6 	bpl.w	8000f28 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fa74 	bl	8000668 <HAL_GetTick>
 8001180:	1b80      	subs	r0, r0, r6
 8001182:	2802      	cmp	r0, #2
 8001184:	d9f6      	bls.n	8001174 <HAL_RCC_OscConfig+0x2b8>
 8001186:	e72a      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
 8001188:	58024400 	.word	0x58024400
 800118c:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001190:	69ab      	ldr	r3, [r5, #24]
 8001192:	4c6e      	ldr	r4, [pc, #440]	; (800134c <HAL_RCC_OscConfig+0x490>)
 8001194:	b183      	cbz	r3, 80011b8 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800119e:	f7ff fa63 	bl	8000668 <HAL_GetTick>
 80011a2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	0498      	lsls	r0, r3, #18
 80011a8:	f53f aec2 	bmi.w	8000f30 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80011ac:	f7ff fa5c 	bl	8000668 <HAL_GetTick>
 80011b0:	1b80      	subs	r0, r0, r6
 80011b2:	2802      	cmp	r0, #2
 80011b4:	d9f6      	bls.n	80011a4 <HAL_RCC_OscConfig+0x2e8>
 80011b6:	e712      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011be:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80011c0:	f7ff fa52 	bl	8000668 <HAL_GetTick>
 80011c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	0499      	lsls	r1, r3, #18
 80011ca:	f57f aeb1 	bpl.w	8000f30 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80011ce:	f7ff fa4b 	bl	8000668 <HAL_GetTick>
 80011d2:	1b80      	subs	r0, r0, r6
 80011d4:	2802      	cmp	r0, #2
 80011d6:	d9f6      	bls.n	80011c6 <HAL_RCC_OscConfig+0x30a>
 80011d8:	e701      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff fa45 	bl	8000668 <HAL_GetTick>
 80011de:	1b80      	subs	r0, r0, r6
 80011e0:	2864      	cmp	r0, #100	; 0x64
 80011e2:	f67f aeb0 	bls.w	8000f46 <HAL_RCC_OscConfig+0x8a>
 80011e6:	e6fa      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	b9b3      	cbnz	r3, 8001218 <HAL_RCC_OscConfig+0x35c>
 80011ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6723      	str	r3, [r4, #112]	; 0x70
 80011f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011fe:	f7ff fa33 	bl	8000668 <HAL_GetTick>
 8001202:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001204:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001206:	0798      	lsls	r0, r3, #30
 8001208:	f57f aeb4 	bpl.w	8000f74 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120c:	f7ff fa2c 	bl	8000668 <HAL_GetTick>
 8001210:	1b80      	subs	r0, r0, r6
 8001212:	42b8      	cmp	r0, r7
 8001214:	d9f6      	bls.n	8001204 <HAL_RCC_OscConfig+0x348>
 8001216:	e6e2      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001218:	2b05      	cmp	r3, #5
 800121a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800121c:	d103      	bne.n	8001226 <HAL_RCC_OscConfig+0x36a>
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6723      	str	r3, [r4, #112]	; 0x70
 8001224:	e698      	b.n	8000f58 <HAL_RCC_OscConfig+0x9c>
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6723      	str	r3, [r4, #112]	; 0x70
 800122c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	e694      	b.n	8000f5e <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001234:	f7ff fa18 	bl	8000668 <HAL_GetTick>
 8001238:	1bc0      	subs	r0, r0, r7
 800123a:	42a0      	cmp	r0, r4
 800123c:	f67f ae96 	bls.w	8000f6c <HAL_RCC_OscConfig+0xb0>
 8001240:	e6cd      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001242:	4c42      	ldr	r4, [pc, #264]	; (800134c <HAL_RCC_OscConfig+0x490>)
 8001244:	6923      	ldr	r3, [r4, #16]
 8001246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800124a:	2b18      	cmp	r3, #24
 800124c:	f43f aeaf 	beq.w	8000fae <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8001250:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001258:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125a:	d169      	bne.n	8001330 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 800125c:	f7ff fa04 	bl	8000668 <HAL_GetTick>
 8001260:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	0199      	lsls	r1, r3, #6
 8001266:	d45d      	bmi.n	8001324 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800126a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800126c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001270:	f023 0303 	bic.w	r3, r3, #3
 8001274:	4313      	orrs	r3, r2
 8001276:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001278:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800127c:	62a3      	str	r3, [r4, #40]	; 0x28
 800127e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001280:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001282:	3b01      	subs	r3, #1
 8001284:	3a01      	subs	r2, #1
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	0412      	lsls	r2, r2, #16
 800128a:	b29b      	uxth	r3, r3
 800128c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001290:	4313      	orrs	r3, r2
 8001292:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001294:	3a01      	subs	r2, #1
 8001296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800129a:	4313      	orrs	r3, r2
 800129c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800129e:	3a01      	subs	r2, #1
 80012a0:	0612      	lsls	r2, r2, #24
 80012a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80012a6:	4313      	orrs	r3, r2
 80012a8:	6323      	str	r3, [r4, #48]	; 0x30
 80012aa:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80012ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	fab3 f183 	clz	r1, r3
 80012b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80012be:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012c2:	408b      	lsls	r3, r1
 80012c4:	4313      	orrs	r3, r2
 80012c6:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80012c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80012cc:	f023 030c 	bic.w	r3, r3, #12
 80012d0:	4313      	orrs	r3, r2
 80012d2:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80012d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012d6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80012d8:	f023 0302 	bic.w	r3, r3, #2
 80012dc:	4313      	orrs	r3, r2
 80012de:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80012e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80012e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ee:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80012f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f6:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80012f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001308:	f7ff f9ae 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4c0f      	ldr	r4, [pc, #60]	; (800134c <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 800130e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	019a      	lsls	r2, r3, #6
 8001314:	f53f ae32 	bmi.w	8000f7c <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff f9a6 	bl	8000668 <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2802      	cmp	r0, #2
 8001320:	d9f6      	bls.n	8001310 <HAL_RCC_OscConfig+0x454>
 8001322:	e65c      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f9a0 	bl	8000668 <HAL_GetTick>
 8001328:	1b80      	subs	r0, r0, r6
 800132a:	2802      	cmp	r0, #2
 800132c:	d999      	bls.n	8001262 <HAL_RCC_OscConfig+0x3a6>
 800132e:	e656      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8001330:	f7ff f99a 	bl	8000668 <HAL_GetTick>
 8001334:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	f57f ae1f 	bpl.w	8000f7c <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff f993 	bl	8000668 <HAL_GetTick>
 8001342:	1b40      	subs	r0, r0, r5
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f6      	bls.n	8001336 <HAL_RCC_OscConfig+0x47a>
 8001348:	e649      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
 800134a:	bf00      	nop
 800134c:	58024400 	.word	0x58024400

08001350 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001350:	4b48      	ldr	r3, [pc, #288]	; (8001474 <HAL_RCC_GetSysClockFreq+0x124>)
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001358:	2a10      	cmp	r2, #16
{
 800135a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135c:	d00e      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x2c>
 800135e:	2a18      	cmp	r2, #24
 8001360:	d00e      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x30>
 8001362:	2a00      	cmp	r2, #0
 8001364:	f040 8084 	bne.w	8001470 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4843      	ldr	r0, [pc, #268]	; (8001478 <HAL_RCC_GetSysClockFreq+0x128>)
 800136c:	f012 0f20 	tst.w	r2, #32
 8001370:	d07f      	beq.n	8001472 <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001378:	40d8      	lsrs	r0, r3
 800137a:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800137c:	483f      	ldr	r0, [pc, #252]	; (800147c <HAL_RCC_GetSysClockFreq+0x12c>)
 800137e:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001380:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001382:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001388:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800138c:	f001 0101 	and.w	r1, r1, #1
 8001390:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8001480 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001394:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001398:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800139a:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800139e:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 80013a2:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80013a4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80013a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 80013ac:	d002      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x64>
 80013ae:	d30e      	bcc.n	80013ce <HAL_RCC_GetSysClockFreq+0x7e>
 80013b0:	2a02      	cmp	r2, #2
 80013b2:	d04c      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a33      	ldr	r2, [pc, #204]	; (8001484 <HAL_RCC_GetSysClockFreq+0x134>)
 80013b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013bc:	ee07 3a10 	vmov	s14, r3
 80013c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013c4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013cc:	e04b      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f012 0f20 	tst.w	r2, #32
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_RCC_GetSysClockFreq+0x128>)
 80013d6:	d026      	beq.n	8001426 <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80013d8:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80013dc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80013e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80013e4:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80013e6:	fbb2 f2f0 	udiv	r2, r2, r0
 80013ea:	ee07 2a10 	vmov	s14, r2
 80013ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80013f2:	ee07 3a10 	vmov	s14, r3
 80013f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013fa:	eea6 7a25 	vfma.f32	s14, s12, s11
 80013fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001402:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_GetSysClockFreq+0x124>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800140e:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001410:	ee07 3a10 	vmov	s14, r3
 8001414:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001418:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800141c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001420:	ee17 0a90 	vmov	r0, s15
 8001424:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800142c:	ee07 3a10 	vmov	s14, r3
 8001430:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001434:	fbb2 f3f0 	udiv	r3, r2, r0
 8001438:	eea6 7a25 	vfma.f32	s14, s12, s11
 800143c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001440:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	e7db      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001456:	ee07 3a10 	vmov	s14, r3
 800145a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800145e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001462:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001466:	fbb2 f2f0 	udiv	r2, r2, r0
 800146a:	ee07 2a90 	vmov	s15, r2
 800146e:	e7e9      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001472:	bd10      	pop	{r4, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	03d09000 	.word	0x03d09000
 800147c:	017d7840 	.word	0x017d7840
 8001480:	39000000 	.word	0x39000000
 8001484:	003d0900 	.word	0x003d0900

08001488 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_RCC_ClockConfig+0x1a4>)
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	428b      	cmp	r3, r1
{
 8001492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001496:	4604      	mov	r4, r0
 8001498:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800149a:	d342      	bcc.n	8001522 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	0797      	lsls	r7, r2, #30
 80014a0:	d44c      	bmi.n	800153c <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	07d6      	lsls	r6, r2, #31
 80014a4:	d452      	bmi.n	800154c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a6:	4a61      	ldr	r2, [pc, #388]	; (800162c <HAL_RCC_ClockConfig+0x1a4>)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	429d      	cmp	r5, r3
 80014b0:	f0c0 80a8 	bcc.w	8001604 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	0755      	lsls	r5, r2, #29
 80014b8:	f100 80af 	bmi.w	800161a <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	0710      	lsls	r0, r2, #28
 80014be:	d506      	bpl.n	80014ce <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80014c0:	495b      	ldr	r1, [pc, #364]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 80014c2:	6960      	ldr	r0, [r4, #20]
 80014c4:	69cb      	ldr	r3, [r1, #28]
 80014c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ca:	4303      	orrs	r3, r0
 80014cc:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ce:	06d1      	lsls	r1, r2, #27
 80014d0:	d506      	bpl.n	80014e0 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80014d2:	4957      	ldr	r1, [pc, #348]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 80014d4:	69a0      	ldr	r0, [r4, #24]
 80014d6:	69cb      	ldr	r3, [r1, #28]
 80014d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014dc:	4303      	orrs	r3, r0
 80014de:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80014e0:	0693      	lsls	r3, r2, #26
 80014e2:	d506      	bpl.n	80014f2 <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 80014e6:	69e1      	ldr	r1, [r4, #28]
 80014e8:	6a13      	ldr	r3, [r2, #32]
 80014ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ee:	430b      	orrs	r3, r1
 80014f0:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80014f2:	f7ff ff2d 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 80014f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	fa92 f2a2 	rbit	r2, r2
 8001502:	fab2 f282 	clz	r2, r2
 8001506:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800150a:	40d3      	lsrs	r3, r2
 800150c:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_RCC_ClockConfig+0x1ac>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	40d8      	lsrs	r0, r3
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 8001514:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff f866 	bl	80005e8 <HAL_InitTick>
  return HAL_OK;
 800151c:	2000      	movs	r0, #0
}
 800151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f023 0307 	bic.w	r3, r3, #7
 8001528:	430b      	orrs	r3, r1
 800152a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	4299      	cmp	r1, r3
 8001534:	d0b2      	beq.n	800149c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153c:	493c      	ldr	r1, [pc, #240]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 800153e:	68e0      	ldr	r0, [r4, #12]
 8001540:	698b      	ldr	r3, [r1, #24]
 8001542:	f023 030f 	bic.w	r3, r3, #15
 8001546:	4303      	orrs	r3, r0
 8001548:	618b      	str	r3, [r1, #24]
 800154a:	e7aa      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 800154e:	68a1      	ldr	r1, [r4, #8]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001556:	430a      	orrs	r2, r1
 8001558:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155c:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	2902      	cmp	r1, #2
 8001560:	d11d      	bne.n	800159e <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	d0e6      	beq.n	8001536 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001568:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800156e:	4f30      	ldr	r7, [pc, #192]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001570:	f022 0207 	bic.w	r2, r2, #7
 8001574:	430a      	orrs	r2, r1
 8001576:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001578:	f7ff f876 	bl	8000668 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157c:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 800157e:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001580:	2b02      	cmp	r3, #2
 8001582:	d119      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800158a:	2b10      	cmp	r3, #16
 800158c:	d08b      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158e:	f7ff f86b 	bl	8000668 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	4540      	cmp	r0, r8
 8001596:	d9f5      	bls.n	8001584 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8001598:	2003      	movs	r0, #3
 800159a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	2903      	cmp	r1, #3
 80015a0:	d102      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015a6:	e7de      	b.n	8001566 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80015a8:	2901      	cmp	r1, #1
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80015ac:	f412 7f80 	tst.w	r2, #256	; 0x100
 80015b0:	e7d9      	b.n	8001566 <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	f012 0f04 	tst.w	r2, #4
 80015b6:	e7d6      	b.n	8001566 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c2:	2b18      	cmp	r3, #24
 80015c4:	f43f af6f 	beq.w	80014a6 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff f84e 	bl	8000668 <HAL_GetTick>
 80015cc:	1b80      	subs	r0, r0, r6
 80015ce:	4540      	cmp	r0, r8
 80015d0:	d9f4      	bls.n	80015bc <HAL_RCC_ClockConfig+0x134>
 80015d2:	e7e1      	b.n	8001598 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d110      	bne.n	80015fa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015de:	2b08      	cmp	r3, #8
 80015e0:	f43f af61 	beq.w	80014a6 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f7ff f840 	bl	8000668 <HAL_GetTick>
 80015e8:	1b80      	subs	r0, r0, r6
 80015ea:	4540      	cmp	r0, r8
 80015ec:	d9f4      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x150>
 80015ee:	e7d3      	b.n	8001598 <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f83a 	bl	8000668 <HAL_GetTick>
 80015f4:	1b80      	subs	r0, r0, r6
 80015f6:	4540      	cmp	r0, r8
 80015f8:	d8ce      	bhi.n	8001598 <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001600:	d1f6      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x168>
 8001602:	e750      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001604:	6813      	ldr	r3, [r2, #0]
 8001606:	f023 0307 	bic.w	r3, r3, #7
 800160a:	432b      	orrs	r3, r5
 800160c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	429d      	cmp	r5, r3
 8001616:	d18e      	bne.n	8001536 <HAL_RCC_ClockConfig+0xae>
 8001618:	e74c      	b.n	80014b4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800161a:	4905      	ldr	r1, [pc, #20]	; (8001630 <HAL_RCC_ClockConfig+0x1a8>)
 800161c:	6920      	ldr	r0, [r4, #16]
 800161e:	698b      	ldr	r3, [r1, #24]
 8001620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001624:	4303      	orrs	r3, r0
 8001626:	618b      	str	r3, [r1, #24]
 8001628:	e748      	b.n	80014bc <HAL_RCC_ClockConfig+0x34>
 800162a:	bf00      	nop
 800162c:	52002000 	.word	0x52002000
 8001630:	58024400 	.word	0x58024400
 8001634:	080045c1 	.word	0x080045c1
 8001638:	20000008 	.word	0x20000008

0800163c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800163c:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 800163e:	f000 fed5 	bl	80023ec <HAL_RCCEx_GetD1SysClockFreq>
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_RCC_GetHCLKFreq+0x28>)
 8001644:	2201      	movs	r2, #1
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	fa92 f2a2 	rbit	r2, r2
 800164c:	fab2 f282 	clz	r2, r2
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	40d3      	lsrs	r3, r2
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	40d8      	lsrs	r0, r3
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_RCC_GetHCLKFreq+0x30>)
 800165e:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001660:	bd08      	pop	{r3, pc}
 8001662:	bf00      	nop
 8001664:	58024400 	.word	0x58024400
 8001668:	080045c1 	.word	0x080045c1
 800166c:	2000000c 	.word	0x2000000c

08001670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001670:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8001672:	f7ff ffe3 	bl	800163c <HAL_RCC_GetHCLKFreq>
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001678:	2210      	movs	r2, #16
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	fa92 f2a2 	rbit	r2, r2
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001688:	40d3      	lsrs	r3, r2
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x28>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
}
 800168e:	40d8      	lsrs	r0, r3
 8001690:	bd08      	pop	{r3, pc}
 8001692:	bf00      	nop
 8001694:	58024400 	.word	0x58024400
 8001698:	080045c1 	.word	0x080045c1

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 800169e:	f7ff ffcd 	bl	800163c <HAL_RCC_GetHCLKFreq>
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	fa92 f2a2 	rbit	r2, r2
 80016ae:	fab2 f282 	clz	r2, r2
 80016b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016b6:	40d3      	lsrs	r3, r2
 80016b8:	4a02      	ldr	r2, [pc, #8]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80016bc:	40d8      	lsrs	r0, r3
 80016be:	bd08      	pop	{r3, pc}
 80016c0:	58024400 	.word	0x58024400
 80016c4:	080045c1 	.word	0x080045c1

080016c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80016ca:	4c31      	ldr	r4, [pc, #196]	; (8001790 <RCCEx_PLL2_Config+0xc8>)
{
 80016cc:	4606      	mov	r6, r0
 80016ce:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80016d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d058      	beq.n	800178c <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016e0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016e2:	f7fe ffc1 	bl	8000668 <HAL_GetTick>
 80016e6:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	011a      	lsls	r2, r3, #4
 80016ec:	d43a      	bmi.n	8001764 <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80016ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016f0:	6832      	ldr	r2, [r6, #0]
 80016f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016f6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80016fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80016fc:	68b3      	ldr	r3, [r6, #8]
 80016fe:	68f2      	ldr	r2, [r6, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	3a01      	subs	r2, #1
 8001704:	025b      	lsls	r3, r3, #9
 8001706:	0412      	lsls	r2, r2, #16
 8001708:	b29b      	uxth	r3, r3
 800170a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800170e:	4313      	orrs	r3, r2
 8001710:	6872      	ldr	r2, [r6, #4]
 8001712:	3a01      	subs	r2, #1
 8001714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001718:	4313      	orrs	r3, r2
 800171a:	6932      	ldr	r2, [r6, #16]
 800171c:	3a01      	subs	r2, #1
 800171e:	0612      	lsls	r2, r2, #24
 8001720:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001724:	4313      	orrs	r3, r2
 8001726:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001728:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800172a:	6972      	ldr	r2, [r6, #20]
 800172c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001730:	4313      	orrs	r3, r2
 8001732:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001736:	69b2      	ldr	r2, [r6, #24]
 8001738:	f023 0320 	bic.w	r3, r3, #32
 800173c:	4313      	orrs	r3, r2
 800173e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001742:	b9b5      	cbnz	r5, 8001772 <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001748:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800174a:	4c11      	ldr	r4, [pc, #68]	; (8001790 <RCCEx_PLL2_Config+0xc8>)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001752:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001754:	f7fe ff88 	bl	8000668 <HAL_GetTick>
 8001758:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	d50f      	bpl.n	8001780 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8001760:	2000      	movs	r0, #0
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001764:	f7fe ff80 	bl	8000668 <HAL_GetTick>
 8001768:	1bc0      	subs	r0, r0, r7
 800176a:	2802      	cmp	r0, #2
 800176c:	d9bc      	bls.n	80016e8 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001772:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001774:	bf0c      	ite	eq
 8001776:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800177a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800177e:	e7e3      	b.n	8001748 <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001780:	f7fe ff72 	bl	8000668 <HAL_GetTick>
 8001784:	1b40      	subs	r0, r0, r5
 8001786:	2802      	cmp	r0, #2
 8001788:	d9e7      	bls.n	800175a <RCCEx_PLL2_Config+0x92>
 800178a:	e7f0      	b.n	800176e <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
}
 800178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001790:	58024400 	.word	0x58024400

08001794 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001796:	4c31      	ldr	r4, [pc, #196]	; (800185c <RCCEx_PLL3_Config+0xc8>)
{
 8001798:	4606      	mov	r6, r0
 800179a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800179c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d058      	beq.n	8001858 <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ae:	f7fe ff5b 	bl	8000668 <HAL_GetTick>
 80017b2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	009a      	lsls	r2, r3, #2
 80017b8:	d43a      	bmi.n	8001830 <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80017ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017bc:	6832      	ldr	r2, [r6, #0]
 80017be:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80017c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80017c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80017c8:	68b3      	ldr	r3, [r6, #8]
 80017ca:	68f2      	ldr	r2, [r6, #12]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	3a01      	subs	r2, #1
 80017d0:	025b      	lsls	r3, r3, #9
 80017d2:	0412      	lsls	r2, r2, #16
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80017da:	4313      	orrs	r3, r2
 80017dc:	6872      	ldr	r2, [r6, #4]
 80017de:	3a01      	subs	r2, #1
 80017e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017e4:	4313      	orrs	r3, r2
 80017e6:	6932      	ldr	r2, [r6, #16]
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0612      	lsls	r2, r2, #24
 80017ec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017f0:	4313      	orrs	r3, r2
 80017f2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80017f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f6:	6972      	ldr	r2, [r6, #20]
 80017f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80017fc:	4313      	orrs	r3, r2
 80017fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001802:	69b2      	ldr	r2, [r6, #24]
 8001804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001808:	4313      	orrs	r3, r2
 800180a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800180c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800180e:	b9b5      	cbnz	r5, 800183e <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001814:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001816:	4c11      	ldr	r4, [pc, #68]	; (800185c <RCCEx_PLL3_Config+0xc8>)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001820:	f7fe ff22 	bl	8000668 <HAL_GetTick>
 8001824:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	d50f      	bpl.n	800184c <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 800182c:	2000      	movs	r0, #0
 800182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001830:	f7fe ff1a 	bl	8000668 <HAL_GetTick>
 8001834:	1bc0      	subs	r0, r0, r7
 8001836:	2802      	cmp	r0, #2
 8001838:	d9bc      	bls.n	80017b4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800183a:	2003      	movs	r0, #3
 800183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800183e:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001840:	bf0c      	ite	eq
 8001842:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001846:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800184a:	e7e3      	b.n	8001814 <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800184c:	f7fe ff0c 	bl	8000668 <HAL_GetTick>
 8001850:	1b40      	subs	r0, r0, r5
 8001852:	2802      	cmp	r0, #2
 8001854:	d9e7      	bls.n	8001826 <RCCEx_PLL3_Config+0x92>
 8001856:	e7f0      	b.n	800183a <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
}
 800185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800185c:	58024400 	.word	0x58024400

08001860 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001864:	6804      	ldr	r4, [r0, #0]
{
 8001866:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001868:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 800186c:	d014      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800186e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001874:	d018      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001876:	d802      	bhi.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001878:	b183      	cbz	r3, 800189c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 800187a:	2401      	movs	r4, #1
 800187c:	e01b      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800187e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001882:	d023      	beq.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001884:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001888:	d1f7      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800188a:	4aa6      	ldr	r2, [pc, #664]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800188c:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800188e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001890:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001894:	430b      	orrs	r3, r1
 8001896:	6513      	str	r3, [r2, #80]	; 0x50
 8001898:	2400      	movs	r4, #0
 800189a:	e00c      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800189c:	4aa1      	ldr	r2, [pc, #644]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800189e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80018a6:	e7f0      	b.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80018a8:	2102      	movs	r1, #2
 80018aa:	1d28      	adds	r0, r5, #4
 80018ac:	f7ff ff0c 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80018b0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d0e9      	beq.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80018b6:	682b      	ldr	r3, [r5, #0]
 80018b8:	05de      	lsls	r6, r3, #23
 80018ba:	d53c      	bpl.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 80018bc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d834      	bhi.n	800192c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80018c2:	e8df f003 	tbb	[pc, r3]
 80018c6:	1009      	.short	0x1009
 80018c8:	0e2d      	.short	0x0e2d
 80018ca:	0e          	.byte	0x0e
 80018cb:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80018cc:	2102      	movs	r1, #2
 80018ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80018d2:	f7ff ff5f 	bl	8001794 <RCCEx_PLL3_Config>
 80018d6:	e7eb      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018d8:	4a92      	ldr	r2, [pc, #584]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 80018e2:	4626      	mov	r6, r4
 80018e4:	e004      	b.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80018e6:	2100      	movs	r1, #0
 80018e8:	1d28      	adds	r0, r5, #4
 80018ea:	f7ff feed 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80018ee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80018f0:	b9ee      	cbnz	r6, 800192e <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018f2:	4a8c      	ldr	r2, [pc, #560]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018f4:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80018f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80018f8:	f023 0307 	bic.w	r3, r3, #7
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	0598      	lsls	r0, r3, #22
 8001904:	d527      	bpl.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001906:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001908:	2b80      	cmp	r3, #128	; 0x80
 800190a:	d043      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800190c:	d815      	bhi.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d034      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d038      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 8001916:	2601      	movs	r6, #1
      status |= ret;
 8001918:	ea44 0006 	orr.w	r0, r4, r6
 800191c:	b2c4      	uxtb	r4, r0
 800191e:	e01a      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001920:	2100      	movs	r1, #0
 8001922:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001926:	f7ff ff35 	bl	8001794 <RCCEx_PLL3_Config>
 800192a:	e7e0      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 800192c:	2601      	movs	r6, #1
      status |= ret;
 800192e:	ea44 0006 	orr.w	r0, r4, r6
 8001932:	b2c4      	uxtb	r4, r0
 8001934:	e7e4      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001936:	4626      	mov	r6, r4
 8001938:	e7e2      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 800193a:	2bc0      	cmp	r3, #192	; 0xc0
 800193c:	d002      	beq.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001942:	d1e8      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 8001944:	2e00      	cmp	r6, #0
 8001946:	d1e7      	bne.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001948:	4a76      	ldr	r2, [pc, #472]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800194a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800194c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800194e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001952:	430b      	orrs	r3, r1
 8001954:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	0559      	lsls	r1, r3, #21
 800195a:	d531      	bpl.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 800195c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8001960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001964:	d04b      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8001966:	d81b      	bhi.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03c      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800196c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001970:	d03f      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 8001972:	2601      	movs	r6, #1
      status |= ret;
 8001974:	ea44 0006 	orr.w	r0, r4, r6
 8001978:	b2c4      	uxtb	r4, r0
 800197a:	e021      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800197c:	4a69      	ldr	r2, [pc, #420]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800197e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001986:	e7dd      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001988:	2100      	movs	r1, #0
 800198a:	1d28      	adds	r0, r5, #4
 800198c:	f7ff fe9c 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001990:	4606      	mov	r6, r0
      break;
 8001992:	e7d7      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001994:	2100      	movs	r1, #0
 8001996:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800199a:	f7ff fefb 	bl	8001794 <RCCEx_PLL3_Config>
 800199e:	e7f7      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 80019a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80019a4:	d002      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80019a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019aa:	d1e2      	bne.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 80019ac:	2e00      	cmp	r6, #0
 80019ae:	d1e1      	bne.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80019b0:	4a5c      	ldr	r2, [pc, #368]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019b2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80019b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80019b8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80019bc:	430b      	orrs	r3, r1
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	051a      	lsls	r2, r3, #20
 80019c4:	d531      	bpl.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 80019c6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80019ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ce:	d045      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80019d0:	d81b      	bhi.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d036      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80019d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019da:	d039      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 80019dc:	2601      	movs	r6, #1
      status |= ret;
 80019de:	ea44 0006 	orr.w	r0, r4, r6
 80019e2:	b2c4      	uxtb	r4, r0
 80019e4:	e021      	b.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019e6:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ee:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80019f0:	e7dc      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80019f2:	2100      	movs	r1, #0
 80019f4:	1d28      	adds	r0, r5, #4
 80019f6:	f7ff fe67 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80019fa:	4606      	mov	r6, r0
      break;
 80019fc:	e7d6      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80019fe:	2100      	movs	r1, #0
 8001a00:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a04:	f7ff fec6 	bl	8001794 <RCCEx_PLL3_Config>
 8001a08:	e7f7      	b.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001a0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a0e:	d002      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8001a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a14:	d1e2      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 8001a16:	2e00      	cmp	r6, #0
 8001a18:	d1e1      	bne.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001a1a:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a1c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001a20:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	d528      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 8001a30:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d037      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001a36:	d817      	bhi.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001a38:	b1d3      	cbz	r3, 8001a70 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 8001a3a:	2601      	movs	r6, #1
      status |= ret;
 8001a3c:	ea44 0006 	orr.w	r0, r4, r6
 8001a40:	b2c4      	uxtb	r4, r0
 8001a42:	e01e      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a44:	4a37      	ldr	r2, [pc, #220]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001a4e:	e7e2      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001a50:	2100      	movs	r1, #0
 8001a52:	1d28      	adds	r0, r5, #4
 8001a54:	f7ff fe38 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001a58:	4606      	mov	r6, r0
      break;
 8001a5a:	e7dc      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a62:	f7ff fe97 	bl	8001794 <RCCEx_PLL3_Config>
 8001a66:	e7f7      	b.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d022      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8001a6c:	2b30      	cmp	r3, #48	; 0x30
 8001a6e:	d1e4      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 8001a70:	2e00      	cmp	r6, #0
 8001a72:	d1e3      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a76:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001a78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001a7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001a82:	682b      	ldr	r3, [r5, #0]
 8001a84:	04df      	lsls	r7, r3, #19
 8001a86:	d529      	bpl.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001a88:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8e:	d042      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001a90:	d815      	bhi.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d033      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8001a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9a:	d036      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 8001a9c:	2601      	movs	r6, #1
      status |= ret;
 8001a9e:	ea44 0006 	orr.w	r0, r4, r6
 8001aa2:	b2c4      	uxtb	r4, r0
 8001aa4:	e01a      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001aa8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aae:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001ab0:	e7de      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	1d28      	adds	r0, r5, #4
 8001ab6:	f7ff fe07 	bl	80016c8 <RCCEx_PLL2_Config>
 8001aba:	4606      	mov	r6, r0
      break;
 8001abc:	e7d8      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ac2:	d002      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8001ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ac8:	d1e8      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 8001aca:	2e00      	cmp	r6, #0
 8001acc:	d1e7      	bne.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ad0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001ad2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	0498      	lsls	r0, r3, #18
 8001ae0:	d534      	bpl.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001ae2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ae8:	d048      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001aea:	d81d      	bhi.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8001aec:	b32b      	cbz	r3, 8001b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d03d      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 8001af4:	2601      	movs	r6, #1
      status |= ret;
 8001af6:	ea44 0006 	orr.w	r0, r4, r6
 8001afa:	b2c4      	uxtb	r4, r0
 8001afc:	e026      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b06:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001b08:	e7df      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	1d28      	adds	r0, r5, #4
 8001b0e:	f7ff fddb 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001b12:	4606      	mov	r6, r0
      break;
 8001b14:	e7d9      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001b16:	2100      	movs	r1, #0
 8001b18:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b1c:	f7ff fe3a 	bl	8001794 <RCCEx_PLL3_Config>
 8001b20:	e7f7      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8001b22:	bf00      	nop
 8001b24:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001b28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b32:	d002      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001b38:	d1dc      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 8001b3a:	2e00      	cmp	r6, #0
 8001b3c:	d1db      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001b3e:	4aa0      	ldr	r2, [pc, #640]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001b40:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001b42:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b44:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	0459      	lsls	r1, r3, #17
 8001b50:	d52d      	bpl.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001b52:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b5a:	d04c      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001b5c:	d814      	bhi.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001b5e:	b1e3      	cbz	r3, 8001b9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b64:	d041      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 8001b66:	2601      	movs	r6, #1
      status |= ret;
 8001b68:	ea44 0006 	orr.w	r0, r4, r6
 8001b6c:	b2c4      	uxtb	r4, r0
 8001b6e:	e01e      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001b70:	2101      	movs	r1, #1
 8001b72:	1d28      	adds	r0, r5, #4
 8001b74:	f7ff fda8 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001b78:	4606      	mov	r6, r0
      break;
 8001b7a:	e7de      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b82:	f7ff fe07 	bl	8001794 <RCCEx_PLL3_Config>
 8001b86:	e7f7      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b92:	d002      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001b98:	d1e5      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 8001b9a:	2e00      	cmp	r6, #0
 8001b9c:	d1e4      	bne.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001b9e:	4a88      	ldr	r2, [pc, #544]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001ba0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8001ba4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ba6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	d50f      	bpl.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 8001bb4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bba:	d022      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bc0:	d025      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001bc2:	bb53      	cbnz	r3, 8001c1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 8001bc4:	bb56      	cbnz	r6, 8001c1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001bc8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8001bca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001bcc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	d532      	bpl.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 8001bda:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	f200 808a 	bhi.w	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8001be2:	e8df f003 	tbb	[pc, r3]
 8001be6:	1f24      	.short	0x1f24
 8001be8:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001bea:	2101      	movs	r1, #1
 8001bec:	1d28      	adds	r0, r5, #4
 8001bee:	f7ff fd6b 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001bf2:	4606      	mov	r6, r0
      break;
 8001bf4:	e7d1      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001bfc:	f7ff fdca 	bl	8001794 <RCCEx_PLL3_Config>
 8001c00:	e7f7      	b.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c02:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001c0c:	e7da      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	1d28      	adds	r0, r5, #4
 8001c12:	f7ff fd59 	bl	80016c8 <RCCEx_PLL2_Config>
 8001c16:	4606      	mov	r6, r0
      break;
 8001c18:	e7d4      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 8001c1a:	2601      	movs	r6, #1
      status |= ret;
 8001c1c:	ea44 0006 	orr.w	r0, r4, r6
 8001c20:	b2c4      	uxtb	r4, r0
 8001c22:	e7d7      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c24:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d162      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001c32:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c34:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001c36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c38:	f023 0303 	bic.w	r3, r3, #3
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	025f      	lsls	r7, r3, #9
 8001c44:	d542      	bpl.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c46:	4f5f      	ldr	r7, [pc, #380]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001c50:	f7fe fd0a 	bl	8000668 <HAL_GetTick>
 8001c54:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	05d8      	lsls	r0, r3, #23
 8001c5a:	d551      	bpl.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 8001c5c:	2e00      	cmp	r6, #0
 8001c5e:	d156      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c62:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8001c66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c68:	4042      	eors	r2, r0
 8001c6a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001c6e:	d00b      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c72:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001c7c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001c84:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001c86:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001c88:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fceb 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	4f4b      	ldr	r7, [pc, #300]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 8001c94:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9c:	0799      	lsls	r1, r3, #30
 8001c9e:	d53a      	bpl.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ca0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8001ca4:	4946      	ldr	r1, [pc, #280]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001ca6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001caa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001cae:	d13d      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8001cb0:	6908      	ldr	r0, [r1, #16]
 8001cb2:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001cb4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001cb8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001cbc:	4302      	orrs	r2, r0
 8001cbe:	610a      	str	r2, [r1, #16]
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001cc6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	07da      	lsls	r2, r3, #31
 8001cd0:	d53f      	bpl.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001cd2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d04d      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001cd8:	d82c      	bhi.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8001cda:	b38b      	cbz	r3, 8001d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d043      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 8001ce0:	2601      	movs	r6, #1
      status |= ret;
 8001ce2:	ea44 0006 	orr.w	r0, r4, r6
 8001ce6:	b2c4      	uxtb	r4, r0
 8001ce8:	e033      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001cea:	2102      	movs	r1, #2
 8001cec:	1d28      	adds	r0, r5, #4
 8001cee:	f7ff fceb 	bl	80016c8 <RCCEx_PLL2_Config>
 8001cf2:	4606      	mov	r6, r0
      break;
 8001cf4:	e79b      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 8001cf6:	2601      	movs	r6, #1
      status |= ret;
 8001cf8:	ea44 0006 	orr.w	r0, r4, r6
 8001cfc:	b2c4      	uxtb	r4, r0
 8001cfe:	e79f      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7fe fcb2 	bl	8000668 <HAL_GetTick>
 8001d04:	eba0 0008 	sub.w	r0, r0, r8
 8001d08:	2864      	cmp	r0, #100	; 0x64
 8001d0a:	d9a4      	bls.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8001d0c:	2603      	movs	r6, #3
      status |= ret;
 8001d0e:	ea44 0006 	orr.w	r0, r4, r6
 8001d12:	b2c4      	uxtb	r4, r0
 8001d14:	e7da      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7fe fca7 	bl	8000668 <HAL_GetTick>
 8001d1a:	eba0 0008 	sub.w	r0, r0, r8
 8001d1e:	4548      	cmp	r0, r9
 8001d20:	d9bb      	bls.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 8001d22:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 8001d26:	2603      	movs	r6, #3
        status |= ret;
 8001d28:	b2c4      	uxtb	r4, r0
 8001d2a:	e7cf      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d2c:	690a      	ldr	r2, [r1, #16]
 8001d2e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001d32:	e7c4      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d003      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001d38:	2b28      	cmp	r3, #40	; 0x28
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001d3c:	2b18      	cmp	r3, #24
 8001d3e:	d1cf      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 8001d40:	2e00      	cmp	r6, #0
 8001d42:	d1ce      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001d46:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8001d48:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001d4a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	079b      	lsls	r3, r3, #30
 8001d56:	d520      	bpl.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8001d58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d836      	bhi.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8001d5e:	e8df f003 	tbb	[pc, r3]
 8001d62:	0f14      	.short	0x0f14
 8001d64:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001d68:	2101      	movs	r1, #1
 8001d6a:	1d28      	adds	r0, r5, #4
 8001d6c:	f7ff fcac 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001d70:	4606      	mov	r6, r0
      break;
 8001d72:	e7e5      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001d74:	2101      	movs	r1, #1
 8001d76:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001d7a:	f7ff fd0b 	bl	8001794 <RCCEx_PLL3_Config>
 8001d7e:	e7f7      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001d80:	2101      	movs	r1, #1
 8001d82:	1d28      	adds	r0, r5, #4
 8001d84:	f7ff fca0 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001d88:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001d8a:	bb06      	cbnz	r6, 8001dce <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001d8e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8001d90:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001d92:	f023 0307 	bic.w	r3, r3, #7
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	075f      	lsls	r7, r3, #29
 8001d9e:	d528      	bpl.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8001da0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d83c      	bhi.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8001da8:	e8df f003 	tbb	[pc, r3]
 8001dac:	1a35151a 	.word	0x1a35151a
 8001db0:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001db2:	2101      	movs	r1, #1
 8001db4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001db8:	f7ff fcec 	bl	8001794 <RCCEx_PLL3_Config>
 8001dbc:	e7e4      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8001dbe:	bf00      	nop
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	58024800 	.word	0x58024800
 8001dc8:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 8001dcc:	2601      	movs	r6, #1
      status |= ret;
 8001dce:	ea44 0006 	orr.w	r0, r4, r6
 8001dd2:	b2c4      	uxtb	r4, r0
 8001dd4:	e7e1      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	1d28      	adds	r0, r5, #4
 8001dda:	f7ff fc75 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001dde:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001de0:	bb06      	cbnz	r6, 8001e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001de2:	4a99      	ldr	r2, [pc, #612]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001de4:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8001de8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	430b      	orrs	r3, r1
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	0698      	lsls	r0, r3, #26
 8001df6:	d52c      	bpl.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001df8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e00:	d03f      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8001e02:	d813      	bhi.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8001e04:	b1db      	cbz	r3, 8001e3e <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e0a:	d034      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 8001e0c:	2601      	movs	r6, #1
      status |= ret;
 8001e0e:	ea44 0006 	orr.w	r0, r4, r6
 8001e12:	b2c4      	uxtb	r4, r0
 8001e14:	e01d      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e16:	2101      	movs	r1, #1
 8001e18:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e1c:	f7ff fcba 	bl	8001794 <RCCEx_PLL3_Config>
 8001e20:	e7dd      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 8001e22:	2601      	movs	r6, #1
      status |= ret;
 8001e24:	ea44 0006 	orr.w	r0, r4, r6
 8001e28:	b2c4      	uxtb	r4, r0
 8001e2a:	e7e2      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d005      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e36:	d002      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001e3c:	d1e6      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	d1e5      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e42:	4a81      	ldr	r2, [pc, #516]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001e44:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8001e48:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001e4a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	0659      	lsls	r1, r3, #25
 8001e56:	d52d      	bpl.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001e58:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e60:	d042      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8001e62:	d814      	bhi.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8001e64:	b1e3      	cbz	r3, 8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d037      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 8001e6c:	2601      	movs	r6, #1
      status |= ret;
 8001e6e:	ea44 0006 	orr.w	r0, r4, r6
 8001e72:	b2c4      	uxtb	r4, r0
 8001e74:	e01e      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e76:	2100      	movs	r1, #0
 8001e78:	1d28      	adds	r0, r5, #4
 8001e7a:	f7ff fc25 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e7e:	4606      	mov	r6, r0
      break;
 8001e80:	e7dd      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e82:	2102      	movs	r1, #2
 8001e84:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e88:	f7ff fc84 	bl	8001794 <RCCEx_PLL3_Config>
 8001e8c:	e7f7      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001e94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001e9e:	d1e5      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 8001ea0:	2e00      	cmp	r6, #0
 8001ea2:	d1e4      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ea4:	4a68      	ldr	r2, [pc, #416]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001ea6:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8001eaa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001eac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	061a      	lsls	r2, r3, #24
 8001eb8:	d52f      	bpl.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001eba:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8001ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec2:	f000 8095 	beq.w	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8001ec6:	d815      	bhi.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8001ec8:	b1eb      	cbz	r3, 8001f06 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	f000 8089 	beq.w	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 8001ed2:	2601      	movs	r6, #1
      status |= ret;
 8001ed4:	ea44 0006 	orr.w	r0, r4, r6
 8001ed8:	b2c4      	uxtb	r4, r0
 8001eda:	e01e      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001edc:	2100      	movs	r1, #0
 8001ede:	1d28      	adds	r0, r5, #4
 8001ee0:	f7ff fbf2 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ee4:	4606      	mov	r6, r0
      break;
 8001ee6:	e7db      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ee8:	2102      	movs	r1, #2
 8001eea:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001eee:	f7ff fc51 	bl	8001794 <RCCEx_PLL3_Config>
 8001ef2:	e7f7      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001efa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001efe:	d002      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001f00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001f04:	d1e5      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 8001f06:	2e00      	cmp	r6, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001f0a:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001f0c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8001f10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f16:	430b      	orrs	r3, r1
 8001f18:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8001f1a:	682b      	ldr	r3, [r5, #0]
 8001f1c:	071b      	lsls	r3, r3, #28
 8001f1e:	d50b      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001f20:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8001f24:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f28:	d168      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001f30:	f7ff fc30 	bl	8001794 <RCCEx_PLL3_Config>
 8001f34:	4304      	orrs	r4, r0
 8001f36:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	06df      	lsls	r7, r3, #27
 8001f3c:	d50b      	bpl.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001f3e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8001f42:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001f46:	d160      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f48:	2102      	movs	r1, #2
 8001f4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001f4e:	f7ff fc21 	bl	8001794 <RCCEx_PLL3_Config>
 8001f52:	4304      	orrs	r4, r0
 8001f54:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f56:	682b      	ldr	r3, [r5, #0]
 8001f58:	0318      	lsls	r0, r3, #12
 8001f5a:	d517      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 8001f5c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001f60:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001f64:	d058      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8001f66:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d159      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f70:	1d28      	adds	r0, r5, #4
 8001f72:	f7ff fba9 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f76:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f78:	2e00      	cmp	r6, #0
 8001f7a:	d154      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f7c:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001f7e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001f82:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f84:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	0359      	lsls	r1, r3, #13
 8001f90:	d519      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 8001f92:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f9a:	d048      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fa0:	d007      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8001fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fa6:	d149      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001fb2:	2e00      	cmp	r6, #0
 8001fb4:	d143      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001fb8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8001fbc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	03da      	lsls	r2, r3, #15
 8001fca:	d54d      	bpl.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001fcc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d03c      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd6:	f000 8099 	beq.w	800210c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 8001fda:	2601      	movs	r6, #1
      status |= ret;
 8001fdc:	ea44 0006 	orr.w	r0, r4, r6
 8001fe0:	b2c4      	uxtb	r4, r0
 8001fe2:	e041      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	1d28      	adds	r0, r5, #4
 8001fe8:	f7ff fb6e 	bl	80016c8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001fec:	4606      	mov	r6, r0
      break;
 8001fee:	e78a      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ff6:	f7ff fbcd 	bl	8001794 <RCCEx_PLL3_Config>
 8001ffa:	e7f7      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001ffe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002000:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002004:	430b      	orrs	r3, r1
 8002006:	6553      	str	r3, [r2, #84]	; 0x54
 8002008:	e796      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800200c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	430b      	orrs	r3, r1
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
 8002016:	e79e      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002018:	2102      	movs	r1, #2
 800201a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800201e:	f7ff fbb9 	bl	8001794 <RCCEx_PLL3_Config>
 8002022:	e7a8      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 8002024:	2601      	movs	r6, #1
      status |= ret;
 8002026:	ea44 0006 	orr.w	r0, r4, r6
 800202a:	b2c4      	uxtb	r4, r0
 800202c:	e7ae      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800202e:	2101      	movs	r1, #1
 8002030:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002034:	f7ff fbae 	bl	8001794 <RCCEx_PLL3_Config>
 8002038:	4606      	mov	r6, r0
      break;
 800203a:	e7ba      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 800203c:	2601      	movs	r6, #1
      status |= ret;
 800203e:	ea44 0006 	orr.w	r0, r4, r6
 8002042:	b2c4      	uxtb	r4, r0
 8002044:	e7bf      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x766>
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800204c:	4a3b      	ldr	r2, [pc, #236]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800204e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002056:	2e00      	cmp	r6, #0
 8002058:	d1c0      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800205a:	4a38      	ldr	r2, [pc, #224]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800205c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800205e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002064:	430b      	orrs	r3, r1
 8002066:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	d506      	bpl.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800206e:	2102      	movs	r1, #2
 8002070:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002074:	f7ff fb8e 	bl	8001794 <RCCEx_PLL3_Config>
 8002078:	4304      	orrs	r4, r0
 800207a:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	039f      	lsls	r7, r3, #14
 8002080:	d50e      	bpl.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 8002082:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8002084:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002088:	d051      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800208a:	d845      	bhi.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800208c:	2900      	cmp	r1, #0
 800208e:	d149      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 8002090:	2e00      	cmp	r6, #0
 8002092:	d148      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002094:	4829      	ldr	r0, [pc, #164]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002096:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800209c:	430a      	orrs	r2, r1
 800209e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020a0:	02de      	lsls	r6, r3, #11
 80020a2:	d506      	bpl.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80020a4:	4925      	ldr	r1, [pc, #148]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80020a6:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80020a8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80020aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020ae:	4302      	orrs	r2, r0
 80020b0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80020b2:	00d8      	lsls	r0, r3, #3
 80020b4:	d507      	bpl.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80020b6:	4921      	ldr	r1, [pc, #132]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80020b8:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 80020bc:	690a      	ldr	r2, [r1, #16]
 80020be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020c2:	4302      	orrs	r2, r0
 80020c4:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020c6:	0299      	lsls	r1, r3, #10
 80020c8:	d506      	bpl.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020ca:	491c      	ldr	r1, [pc, #112]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80020cc:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80020ce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80020d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80020d4:	4302      	orrs	r2, r0
 80020d6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80020d8:	005a      	lsls	r2, r3, #1
 80020da:	d509      	bpl.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80020de:	6911      	ldr	r1, [r2, #16]
 80020e0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80020e4:	6111      	str	r1, [r2, #16]
 80020e6:	6911      	ldr	r1, [r2, #16]
 80020e8:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 80020ec:	4301      	orrs	r1, r0
 80020ee:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da06      	bge.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80020f6:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80020f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80020fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80020fe:	430b      	orrs	r3, r1
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	1c20      	adds	r0, r4, #0
 8002104:	bf18      	it	ne
 8002106:	2001      	movne	r0, #1
}
 8002108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800210c:	2102      	movs	r1, #2
 800210e:	1d28      	adds	r0, r5, #4
 8002110:	f7ff fada 	bl	80016c8 <RCCEx_PLL2_Config>
 8002114:	4606      	mov	r6, r0
      break;
 8002116:	e79e      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 8002118:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800211c:	d0b8      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800211e:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002122:	d0b5      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8002124:	2601      	movs	r6, #1
      status |= ret;
 8002126:	ea44 0006 	orr.w	r0, r4, r6
 800212a:	b2c4      	uxtb	r4, r0
 800212c:	e7b8      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002130:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002136:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002138:	e7aa      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800213a:	bf00      	nop
 800213c:	58024400 	.word	0x58024400

08002140 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002140:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8002142:	f7ff fa7b 	bl	800163c <HAL_RCC_GetHCLKFreq>
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002148:	2210      	movs	r2, #16
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002158:	40d3      	lsrs	r3, r2
 800215a:	4a03      	ldr	r2, [pc, #12]	; (8002168 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
}
 800215e:	40d8      	lsrs	r0, r3
 8002160:	bd08      	pop	{r3, pc}
 8002162:	bf00      	nop
 8002164:	58024400 	.word	0x58024400
 8002168:	080045c1 	.word	0x080045c1

0800216c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800216c:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800216e:	4c4a      	ldr	r4, [pc, #296]	; (8002298 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8002170:	eddf 5a4a 	vldr	s11, [pc, #296]	; 800229c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8002174:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002176:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800217a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800217c:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002180:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002184:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002188:	4353      	muls	r3, r2
 800218a:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800218e:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8002192:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002194:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002198:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 800219c:	d002      	beq.n	80021a4 <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 800219e:	d30e      	bcc.n	80021be <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d068      	beq.n	8002276 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80021a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021a6:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 80021a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ac:	ee07 3a10 	vmov	s14, r3
 80021b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021b4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80021b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021bc:	e067      	b.n	800228e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	4a38      	ldr	r2, [pc, #224]	; (80022a4 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 80021c2:	f013 0f20 	tst.w	r3, #32
 80021c6:	d042      	beq.n	800224e <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021c8:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80021ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021cc:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80021d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021d4:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80021d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80021da:	ee07 2a10 	vmov	s14, r2
 80021de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80021e2:	ee07 3a10 	vmov	s14, r3
 80021e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021ea:	eea6 7a25 	vfma.f32	s14, s12, s11
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 80021f8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80021fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80021fe:	3301      	adds	r3, #1
 8002200:	ee07 3a10 	vmov	s14, r3
 8002204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002208:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800220c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002210:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8002214:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002216:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800221a:	3301      	adds	r3, #1
 800221c:	ee07 3a10 	vmov	s14, r3
 8002220:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002228:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800222c:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8002230:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002232:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002236:	3301      	adds	r3, #1
 8002238:	ee07 3a10 	vmov	s14, r3
 800223c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002240:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002244:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002248:	edc0 6a02 	vstr	s13, [r0, #8]
 800224c:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800224e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	ee07 3a10 	vmov	s14, r3
 8002258:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800225c:	fbb2 f3f1 	udiv	r3, r2, r1
 8002260:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002268:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8002274:	e7bf      	b.n	80021f6 <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 800227a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227e:	ee07 3a10 	vmov	s14, r3
 8002282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002286:	eea6 7a25 	vfma.f32	s14, s12, s11
 800228a:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800228e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002292:	ee07 2a90 	vmov	s15, r2
 8002296:	e7e9      	b.n	800226c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8002298:	58024400 	.word	0x58024400
 800229c:	39000000 	.word	0x39000000
 80022a0:	003d0900 	.word	0x003d0900
 80022a4:	03d09000 	.word	0x03d09000
 80022a8:	017d7840 	.word	0x017d7840

080022ac <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80022ac:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022ae:	4c4a      	ldr	r4, [pc, #296]	; (80023d8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 80022b0:	eddf 5a4a 	vldr	s11, [pc, #296]	; 80023dc <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80022b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80022b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80022b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80022ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80022bc:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80022c4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80022c8:	4353      	muls	r3, r2
 80022ca:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022ce:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 80022d2:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80022d4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80022d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 80022dc:	d002      	beq.n	80022e4 <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 80022de:	d30e      	bcc.n	80022fe <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d068      	beq.n	80023b6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80022e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022e6:	4a3e      	ldr	r2, [pc, #248]	; (80023e0 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 80022e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ec:	ee07 3a10 	vmov	s14, r3
 80022f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022f4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80022f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022fc:	e067      	b.n	80023ce <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8002302:	f013 0f20 	tst.w	r3, #32
 8002306:	d042      	beq.n	800238e <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002308:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800230a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800230c:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002310:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002314:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002316:	fbb2 f2f1 	udiv	r2, r2, r1
 800231a:	ee07 2a10 	vmov	s14, r2
 800231e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002322:	ee07 3a10 	vmov	s14, r3
 8002326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800232a:	eea6 7a25 	vfma.f32	s14, s12, s11
 800232e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002332:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002336:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8002338:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800233a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800233e:	3301      	adds	r3, #1
 8002340:	ee07 3a10 	vmov	s14, r3
 8002344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002348:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800234c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002350:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8002354:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002356:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800235a:	3301      	adds	r3, #1
 800235c:	ee07 3a10 	vmov	s14, r3
 8002360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002364:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002368:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800236c:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8002370:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002372:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002376:	3301      	adds	r3, #1
 8002378:	ee07 3a10 	vmov	s14, r3
 800237c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002380:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002384:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002388:	edc0 6a02 	vstr	s13, [r0, #8]
 800238c:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800238e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002394:	ee07 3a10 	vmov	s14, r3
 8002398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800239c:	fbb2 f3f1 	udiv	r3, r2, r1
 80023a0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80023a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a8:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80023ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 80023b4:	e7bf      	b.n	8002336 <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80023b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 80023ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023be:	ee07 3a10 	vmov	s14, r3
 80023c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023c6:	eea6 7a25 	vfma.f32	s14, s12, s11
 80023ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80023ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80023d2:	ee07 2a90 	vmov	s15, r2
 80023d6:	e7e9      	b.n	80023ac <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80023d8:	58024400 	.word	0x58024400
 80023dc:	39000000 	.word	0x39000000
 80023e0:	003d0900 	.word	0x003d0900
 80023e4:	03d09000 	.word	0x03d09000
 80023e8:	017d7840 	.word	0x017d7840

080023ec <HAL_RCCEx_GetD1SysClockFreq>:
{
 80023ec:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80023ee:	f7fe ffaf 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 80023f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	fa92 f2a2 	rbit	r2, r2
 80023fe:	fab2 f282 	clz	r2, r2
 8002402:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002406:	40d3      	lsrs	r3, r2
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	40d8      	lsrs	r0, r3
 800240e:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002410:	6018      	str	r0, [r3, #0]
}
 8002412:	bd08      	pop	{r3, pc}
 8002414:	58024400 	.word	0x58024400
 8002418:	080045c1 	.word	0x080045c1
 800241c:	20000008 	.word	0x20000008

08002420 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8002420:	6803      	ldr	r3, [r0, #0]
 8002422:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	f042 0210 	orr.w	r2, r2, #16
 8002432:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 8002442:	f022 0203 	bic.w	r2, r2, #3
 8002446:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800244e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002450:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002454:	2a04      	cmp	r2, #4
 8002456:	d00b      	beq.n	8002470 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 8002458:	068a      	lsls	r2, r1, #26
 800245a:	d509      	bpl.n	8002470 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800245c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002464:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002470:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002474:	2a03      	cmp	r2, #3
 8002476:	d00b      	beq.n	8002490 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8002478:	064a      	lsls	r2, r1, #25
 800247a:	d509      	bpl.n	8002490 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800247c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002480:	f042 0204 	orr.w	r2, r2, #4
 8002484:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 8002490:	058a      	lsls	r2, r1, #22
 8002492:	d509      	bpl.n	80024a8 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002494:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 80024a8:	05ca      	lsls	r2, r1, #23
 80024aa:	d509      	bpl.n	80024c0 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80024ac:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80024b0:	f042 0208 	orr.w	r2, r2, #8
 80024b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 80024c6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 80024ca:	4770      	bx	lr

080024cc <HAL_SPI_Init>:
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80024ce:	4604      	mov	r4, r0
 80024d0:	b908      	cbnz	r0, 80024d6 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 80024d2:	2001      	movs	r0, #1
 80024d4:	bd70      	pop	{r4, r5, r6, pc}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d6:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80024d8:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024da:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_SPI_Init+0x110>)
 80024de:	429a      	cmp	r2, r3
 80024e0:	68c3      	ldr	r3, [r0, #12]
 80024e2:	d008      	beq.n	80024f6 <HAL_SPI_Init+0x2a>
 80024e4:	493e      	ldr	r1, [pc, #248]	; (80025e0 <HAL_SPI_Init+0x114>)
 80024e6:	428a      	cmp	r2, r1
 80024e8:	d005      	beq.n	80024f6 <HAL_SPI_Init+0x2a>
 80024ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80024ee:	428a      	cmp	r2, r1
 80024f0:	d001      	beq.n	80024f6 <HAL_SPI_Init+0x2a>
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	d8ed      	bhi.n	80024d2 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80024f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 80024f8:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80024fa:	0949      	lsrs	r1, r1, #5
  data_size = (data_size+7)/8;
 80024fc:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80024fe:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_SPI_Init+0x110>)
 8002504:	428a      	cmp	r2, r1
 8002506:	d066      	beq.n	80025d6 <HAL_SPI_Init+0x10a>
 8002508:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800250c:	428a      	cmp	r2, r1
 800250e:	d062      	beq.n	80025d6 <HAL_SPI_Init+0x10a>
 8002510:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002514:	428a      	cmp	r2, r1
 8002516:	d05e      	beq.n	80025d6 <HAL_SPI_Init+0x10a>
 8002518:	2b08      	cmp	r3, #8
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800251a:	d8da      	bhi.n	80024d2 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800251c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002520:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002524:	b923      	cbnz	r3, 8002530 <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8002526:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800252a:	4620      	mov	r0, r4
 800252c:	f001 fc4c 	bl	8003dc8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002530:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002536:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800253a:	6813      	ldr	r3, [r2, #0]
 800253c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002544:	69a3      	ldr	r3, [r4, #24]
 8002546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254a:	d107      	bne.n	800255c <HAL_SPI_Init+0x90>
 800254c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002550:	d104      	bne.n	800255c <HAL_SPI_Init+0x90>
 8002552:	b91d      	cbnz	r5, 800255c <HAL_SPI_Init+0x90>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8002554:	6810      	ldr	r0, [r2, #0]
 8002556:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800255a:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800255c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800255e:	69e0      	ldr	r0, [r4, #28]
 8002560:	4330      	orrs	r0, r6
 8002562:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002564:	4330      	orrs	r0, r6
 8002566:	68e6      	ldr	r6, [r4, #12]
 8002568:	4330      	orrs	r0, r6
 800256a:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800256c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800256e:	4303      	orrs	r3, r0
 8002570:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002572:	4303      	orrs	r3, r0
 8002574:	6920      	ldr	r0, [r4, #16]
 8002576:	432b      	orrs	r3, r5
 8002578:	4303      	orrs	r3, r0
 800257a:	6960      	ldr	r0, [r4, #20]
 800257c:	4303      	orrs	r3, r0
 800257e:	6a20      	ldr	r0, [r4, #32]
 8002580:	4303      	orrs	r3, r0
 8002582:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002584:	430b      	orrs	r3, r1
 8002586:	4303      	orrs	r3, r0
 8002588:	68a0      	ldr	r0, [r4, #8]
 800258a:	4303      	orrs	r3, r0
 800258c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800258e:	4303      	orrs	r3, r0
 8002590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002592:	4303      	orrs	r3, r0
 8002594:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002596:	b959      	cbnz	r1, 80025b0 <HAL_SPI_Init+0xe4>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800259e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80025a4:	6893      	ldr	r3, [r2, #8]
 80025a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80025b8:	024b      	lsls	r3, r1, #9
 80025ba:	d505      	bpl.n	80025c8 <HAL_SPI_Init+0xfc>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80025bc:	68d3      	ldr	r3, [r2, #12]
 80025be:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80025c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c4:	430b      	orrs	r3, r1
 80025c6:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80025ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025cc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80025d0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	e79f      	b.n	800251a <HAL_SPI_Init+0x4e>
 80025da:	bf00      	nop
 80025dc:	40013000 	.word	0x40013000
 80025e0:	40003800 	.word	0x40003800

080025e4 <HAL_SPI_Transmit>:
{
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80025ea:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 80025ee:	4604      	mov	r4, r0
 80025f0:	4688      	mov	r8, r1
  __HAL_LOCK(hspi);
 80025f2:	2b01      	cmp	r3, #1
{
 80025f4:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80025f6:	d00c      	beq.n	8002612 <HAL_SPI_Transmit+0x2e>
 80025f8:	2301      	movs	r3, #1
 80025fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80025fe:	f7fe f833 	bl	8000668 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002602:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002606:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002608:	2b01      	cmp	r3, #1
 800260a:	d005      	beq.n	8002618 <HAL_SPI_Transmit+0x34>
    __HAL_UNLOCK(hspi);
 800260c:	2300      	movs	r3, #0
 800260e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8002612:	2002      	movs	r0, #2
 8002614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8002618:	f1b8 0f00 	cmp.w	r8, #0
 800261c:	d000      	beq.n	8002620 <HAL_SPI_Transmit+0x3c>
 800261e:	b92f      	cbnz	r7, 800262c <HAL_SPI_Transmit+0x48>
    __HAL_UNLOCK(hspi);
 8002620:	2300      	movs	r3, #0
    return errorcode;
 8002622:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002624:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8002628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800262c:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800262e:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8002632:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002636:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 8002640:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
 8002642:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->RxXferSize  = 0U;
 8002646:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = 0U;
 800264a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800264e:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 8002650:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002652:	68a3      	ldr	r3, [r4, #8]
 8002654:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	d103      	bne.n	8002664 <HAL_SPI_Transmit+0x80>
    SPI_1LINE_TX(hspi);
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002662:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	0c09      	lsrs	r1, r1, #16
 8002668:	0409      	lsls	r1, r1, #16
 800266a:	4339      	orrs	r1, r7
 800266c:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002676:	6862      	ldr	r2, [r4, #4]
 8002678:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800267c:	d103      	bne.n	8002686 <HAL_SPI_Transmit+0xa2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002686:	68e3      	ldr	r3, [r4, #12]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d82e      	bhi.n	80026ea <HAL_SPI_Transmit+0x106>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800268c:	2b07      	cmp	r3, #7
 800268e:	d875      	bhi.n	800277c <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0U)
 8002690:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02c      	beq.n	80026f4 <HAL_SPI_Transmit+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	6953      	ldr	r3, [r2, #20]
 800269e:	079f      	lsls	r7, r3, #30
 80026a0:	f140 809d 	bpl.w	80027de <HAL_SPI_Transmit+0x1fa>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80026a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026ae:	d97d      	bls.n	80027ac <HAL_SPI_Transmit+0x1c8>
 80026b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026b2:	2940      	cmp	r1, #64	; 0x40
 80026b4:	d97a      	bls.n	80027ac <HAL_SPI_Transmit+0x1c8>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80026b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80026ba:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80026bc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 80026be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80026c2:	3b04      	subs	r3, #4
          hspi->TxXferCount-=2;
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80026ca:	e7e1      	b.n	8002690 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	6953      	ldr	r3, [r2, #20]
 80026d0:	079f      	lsls	r7, r3, #30
 80026d2:	d523      	bpl.n	800271c <HAL_SPI_Transmit+0x138>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80026d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80026da:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80026dc:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 80026de:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 80026ea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1eb      	bne.n	80026cc <HAL_SPI_Transmit+0xe8>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	6953      	ldr	r3, [r2, #20]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	d57c      	bpl.n	80027f6 <HAL_SPI_Transmit+0x212>
  SPI_CloseTransfer(hspi);
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff fe8f 	bl	8002420 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8002702:	2300      	movs	r3, #0
 8002704:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8002708:	2301      	movs	r3, #1
 800270a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800270e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 8002712:	3000      	adds	r0, #0
 8002714:	bf18      	it	ne
 8002716:	2001      	movne	r0, #1
 8002718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800271c:	b985      	cbnz	r5, 8002740 <HAL_SPI_Transmit+0x15c>
          SPI_CloseTransfer(hspi);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff fe7e 	bl	8002420 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8002724:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 8002726:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 8002728:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800272c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8002738:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002740:	1c68      	adds	r0, r5, #1
 8002742:	d0d2      	beq.n	80026ea <HAL_SPI_Transmit+0x106>
 8002744:	f7fd ff90 	bl	8000668 <HAL_GetTick>
 8002748:	1b80      	subs	r0, r0, r6
 800274a:	4285      	cmp	r5, r0
 800274c:	d8cd      	bhi.n	80026ea <HAL_SPI_Transmit+0x106>
 800274e:	e7e6      	b.n	800271e <HAL_SPI_Transmit+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	6953      	ldr	r3, [r2, #20]
 8002754:	0799      	lsls	r1, r3, #30
 8002756:	d51f      	bpl.n	8002798 <HAL_SPI_Transmit+0x1b4>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002758:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002762:	d911      	bls.n	8002788 <HAL_SPI_Transmit+0x1a4>
 8002764:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002766:	b179      	cbz	r1, 8002788 <HAL_SPI_Transmit+0x1a4>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002768:	f853 1b04 	ldr.w	r1, [r3], #4
 800276c:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800276e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8002770:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002774:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002776:	b29b      	uxth	r3, r3
 8002778:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 800277c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e4      	bne.n	8002750 <HAL_SPI_Transmit+0x16c>
 8002786:	e7b5      	b.n	80026f4 <HAL_SPI_Transmit+0x110>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8002788:	f833 1b02 	ldrh.w	r1, [r3], #2
 800278c:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800278e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8002790:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002794:	3b01      	subs	r3, #1
 8002796:	e7ee      	b.n	8002776 <HAL_SPI_Transmit+0x192>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002798:	2d00      	cmp	r5, #0
 800279a:	d0c0      	beq.n	800271e <HAL_SPI_Transmit+0x13a>
 800279c:	1c6b      	adds	r3, r5, #1
 800279e:	d0ed      	beq.n	800277c <HAL_SPI_Transmit+0x198>
 80027a0:	f7fd ff62 	bl	8000668 <HAL_GetTick>
 80027a4:	1b80      	subs	r0, r0, r6
 80027a6:	4285      	cmp	r5, r0
 80027a8:	d8e8      	bhi.n	800277c <HAL_SPI_Transmit+0x198>
 80027aa:	e7b8      	b.n	800271e <HAL_SPI_Transmit+0x13a>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80027ac:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80027b0:	b289      	uxth	r1, r1
 80027b2:	2901      	cmp	r1, #1
 80027b4:	d909      	bls.n	80027ca <HAL_SPI_Transmit+0x1e6>
 80027b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027b8:	b139      	cbz	r1, 80027ca <HAL_SPI_Transmit+0x1e6>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80027ba:	f833 1b02 	ldrh.w	r1, [r3], #2
 80027be:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80027c2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80027c6:	3b02      	subs	r3, #2
 80027c8:	e77c      	b.n	80026c4 <HAL_SPI_Transmit+0xe0>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027d2:	3301      	adds	r3, #1
 80027d4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80027d6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80027da:	3b01      	subs	r3, #1
 80027dc:	e772      	b.n	80026c4 <HAL_SPI_Transmit+0xe0>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80027de:	2d00      	cmp	r5, #0
 80027e0:	d09d      	beq.n	800271e <HAL_SPI_Transmit+0x13a>
 80027e2:	1c68      	adds	r0, r5, #1
 80027e4:	f43f af54 	beq.w	8002690 <HAL_SPI_Transmit+0xac>
 80027e8:	f7fd ff3e 	bl	8000668 <HAL_GetTick>
 80027ec:	1b80      	subs	r0, r0, r6
 80027ee:	4285      	cmp	r5, r0
 80027f0:	f63f af4e 	bhi.w	8002690 <HAL_SPI_Transmit+0xac>
 80027f4:	e793      	b.n	800271e <HAL_SPI_Transmit+0x13a>
    if(Timeout != HAL_MAX_DELAY)
 80027f6:	1c69      	adds	r1, r5, #1
 80027f8:	f43f af7d 	beq.w	80026f6 <HAL_SPI_Transmit+0x112>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027fc:	b12d      	cbz	r5, 800280a <HAL_SPI_Transmit+0x226>
 80027fe:	f7fd ff33 	bl	8000668 <HAL_GetTick>
 8002802:	1b80      	subs	r0, r0, r6
 8002804:	4285      	cmp	r5, r0
 8002806:	f4bf af75 	bcs.w	80026f4 <HAL_SPI_Transmit+0x110>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002816:	e771      	b.n	80026fc <HAL_SPI_Transmit+0x118>

08002818 <HAL_SPI_TxCpltCallback>:
 8002818:	4770      	bx	lr

0800281a <HAL_SPI_RxCpltCallback>:
 800281a:	4770      	bx	lr

0800281c <HAL_SPI_TxRxCpltCallback>:
 800281c:	4770      	bx	lr

0800281e <HAL_SPI_ErrorCallback>:
 800281e:	4770      	bx	lr

08002820 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8002820:	6803      	ldr	r3, [r0, #0]
{
 8002822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t itsource = hspi->Instance->IER;
 8002826:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
 800282a:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 800282c:	f8d3 9014 	ldr.w	r9, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8002830:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8002834:	ea0a 0509 	and.w	r5, sl, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 8002838:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 800283c:	f005 0741 	and.w	r7, r5, #65	; 0x41
  HAL_SPI_StateTypeDef State = hspi->State;
 8002840:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 8002842:	2f01      	cmp	r7, #1
 8002844:	d10a      	bne.n	800285c <HAL_SPI_IRQHandler+0x3c>
    hspi->RxISR(hspi);
 8002846:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002848:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 800284a:	f005 0322 	and.w	r3, r5, #34	; 0x22
 800284e:	2b02      	cmp	r3, #2
 8002850:	d106      	bne.n	8002860 <HAL_SPI_IRQHandler+0x40>
    hspi->TxISR(hspi);
 8002852:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002854:	4620      	mov	r0, r4
}
 8002856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hspi->TxISR(hspi);
 800285a:	4718      	bx	r3
  uint32_t handled  = 0;
 800285c:	2700      	movs	r7, #0
 800285e:	e7f4      	b.n	800284a <HAL_SPI_IRQHandler+0x2a>
  if (handled != 0)
 8002860:	2f00      	cmp	r7, #0
 8002862:	d166      	bne.n	8002932 <HAL_SPI_IRQHandler+0x112>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8002864:	072f      	lsls	r7, r5, #28
 8002866:	d566      	bpl.n	8002936 <HAL_SPI_IRQHandler+0x116>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002868:	6823      	ldr	r3, [r4, #0]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 800286a:	f418 4f40 	tst.w	r8, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	f042 0208 	orr.w	r2, r2, #8
 8002874:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	f042 0210 	orr.w	r2, r2, #16
 800287c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002884:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	611a      	str	r2, [r3, #16]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 800288e:	d00e      	beq.n	80028ae <HAL_SPI_IRQHandler+0x8e>
 8002890:	2e04      	cmp	r6, #4
 8002892:	d009      	beq.n	80028a8 <HAL_SPI_IRQHandler+0x88>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8002894:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002896:	69d2      	ldr	r2, [r2, #28]
 8002898:	b14a      	cbz	r2, 80028ae <HAL_SPI_IRQHandler+0x8e>
 800289a:	2e03      	cmp	r6, #3
 800289c:	d104      	bne.n	80028a8 <HAL_SPI_IRQHandler+0x88>
      HAL_SPI_TxCpltCallback(hspi);
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ffba 	bl	8002818 <HAL_SPI_TxCpltCallback>
 80028a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 80028a8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80028aa:	69d2      	ldr	r2, [r2, #28]
 80028ac:	bb8a      	cbnz	r2, 8002912 <HAL_SPI_IRQHandler+0xf2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80028b4:	d01b      	beq.n	80028ee <HAL_SPI_IRQHandler+0xce>
      SPI_CloseTransfer(hspi);
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff fdb2 	bl	8002420 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 80028bc:	2301      	movs	r3, #1
 80028be:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80028c6:	b323      	cbz	r3, 8002912 <HAL_SPI_IRQHandler+0xf2>
        HAL_SPI_ErrorCallback(hspi);
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7ff ffa8 	bl	800281e <HAL_SPI_ErrorCallback>
 80028ce:	e030      	b.n	8002932 <HAL_SPI_IRQHandler+0x112>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80028d0:	68e1      	ldr	r1, [r4, #12]
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	290f      	cmp	r1, #15
 80028d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028d8:	d90f      	bls.n	80028fa <HAL_SPI_IRQHandler+0xda>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80028da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028dc:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80028e0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80028e2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 80028ee:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1eb      	bne.n	80028d0 <HAL_SPI_IRQHandler+0xb0>
 80028f8:	e7dd      	b.n	80028b6 <HAL_SPI_IRQHandler+0x96>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028fa:	2907      	cmp	r1, #7
 80028fc:	d903      	bls.n	8002906 <HAL_SPI_IRQHandler+0xe6>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80028fe:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002900:	f823 2b02 	strh.w	r2, [r3], #2
 8002904:	e7ec      	b.n	80028e0 <HAL_SPI_IRQHandler+0xc0>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8002906:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800290a:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800290c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800290e:	3301      	adds	r3, #1
 8002910:	e7e6      	b.n	80028e0 <HAL_SPI_IRQHandler+0xc0>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8002912:	2e05      	cmp	r6, #5
 8002914:	d104      	bne.n	8002920 <HAL_SPI_IRQHandler+0x100>
      HAL_SPI_TxRxCpltCallback(hspi);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff ff80 	bl	800281c <HAL_SPI_TxRxCpltCallback>
 800291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8002920:	2e04      	cmp	r6, #4
 8002922:	d104      	bne.n	800292e <HAL_SPI_IRQHandler+0x10e>
      HAL_SPI_RxCpltCallback(hspi);
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff ff78 	bl	800281a <HAL_SPI_RxCpltCallback>
 800292a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800292e:	2e03      	cmp	r6, #3
 8002930:	d0b5      	beq.n	800289e <HAL_SPI_IRQHandler+0x7e>
 8002932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 8002936:	f01a 0f08 	tst.w	sl, #8
 800293a:	d009      	beq.n	8002950 <HAL_SPI_IRQHandler+0x130>
 800293c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8002940:	d006      	beq.n	8002950 <HAL_SPI_IRQHandler+0x130>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	6993      	ldr	r3, [r2, #24]
 8002946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800294a:	6193      	str	r3, [r2, #24]
    return;
 800294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 8002950:	f415 7f58 	tst.w	r5, #864	; 0x360
 8002954:	d0ed      	beq.n	8002932 <HAL_SPI_IRQHandler+0x112>
    if ((trigger & SPI_FLAG_OVR) != RESET)
 8002956:	0668      	lsls	r0, r5, #25
 8002958:	d50a      	bpl.n	8002970 <HAL_SPI_IRQHandler+0x150>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800295a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800295e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002968:	6993      	ldr	r3, [r2, #24]
 800296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != RESET)
 8002970:	05a9      	lsls	r1, r5, #22
 8002972:	d50a      	bpl.n	800298a <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002974:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002978:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002982:	6993      	ldr	r3, [r2, #24]
 8002984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002988:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != RESET)
 800298a:	05ea      	lsls	r2, r5, #23
 800298c:	d50a      	bpl.n	80029a4 <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800298e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002992:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800299c:	6993      	ldr	r3, [r2, #24]
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != RESET)
 80029a4:	06ab      	lsls	r3, r5, #26
 80029a6:	d50a      	bpl.n	80029be <HAL_SPI_IRQHandler+0x19e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80029a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80029ac:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80029b6:	6993      	ldr	r3, [r2, #24]
 80029b8:	f043 0320 	orr.w	r3, r3, #32
 80029bc:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0b5      	beq.n	8002932 <HAL_SPI_IRQHandler+0x112>
      __HAL_SPI_DISABLE(hspi);
 80029c6:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 80029c8:	f418 4f40 	tst.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 80029da:	f022 0203 	bic.w	r2, r2, #3
 80029de:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 80029e0:	d012      	beq.n	8002a08 <HAL_SPI_IRQHandler+0x1e8>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80029e2:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80029e4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80029e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80029ea:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80029ec:	b118      	cbz	r0, 80029f6 <HAL_SPI_IRQHandler+0x1d6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_SPI_IRQHandler+0x1f0>)
 80029f0:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80029f2:	f7fd febf 	bl	8000774 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 80029f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d09a      	beq.n	8002932 <HAL_SPI_IRQHandler+0x112>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_SPI_IRQHandler+0x1f0>)
}
 80029fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a02:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002a04:	f7fd beb6 	b.w	8000774 <HAL_DMA_Abort_IT>
        hspi->State = HAL_SPI_STATE_READY;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 8002a0e:	e75b      	b.n	80028c8 <HAL_SPI_IRQHandler+0xa8>
 8002a10:	08002a15 	.word	0x08002a15

08002a14 <SPI_DMAAbortOnError>:
{
 8002a14:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a16:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = 0U;
 8002a1e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8002a28:	f7ff fef9 	bl	800281e <HAL_SPI_ErrorCallback>
 8002a2c:	bd08      	pop	{r3, pc}
	...

08002a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a34:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002a36:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a38:	6805      	ldr	r5, [r0, #0]
{
 8002a3a:	b087      	sub	sp, #28
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a3c:	68a3      	ldr	r3, [r4, #8]
 8002a3e:	6922      	ldr	r2, [r4, #16]
 8002a40:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a42:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a44:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a46:	4313      	orrs	r3, r2
 8002a48:	6962      	ldr	r2, [r4, #20]
 8002a4a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a4c:	4ab3      	ldr	r2, [pc, #716]	; (8002d1c <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002a4e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a50:	4032      	ands	r2, r6
 8002a52:	4313      	orrs	r3, r2

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a54:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a56:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	686b      	ldr	r3, [r5, #4]
 8002a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a5e:	4313      	orrs	r3, r2
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a60:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a62:	606b      	str	r3, [r5, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a64:	4bae      	ldr	r3, [pc, #696]	; (8002d20 <UART_SetConfig+0x2f0>)
 8002a66:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a68:	bf1c      	itt	ne
 8002a6a:	6a23      	ldrne	r3, [r4, #32]
 8002a6c:	431a      	orrne	r2, r3
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002a6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002a72:	bf02      	ittt	eq
 8002a74:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 8002a76:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8002a78:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002a7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002a7c:	bf08      	it	eq
 8002a7e:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a80:	68ab      	ldr	r3, [r5, #8]
 8002a82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002a86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002a8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a90:	f023 030f 	bic.w	r3, r3, #15
 8002a94:	430b      	orrs	r3, r1
 8002a96:	62eb      	str	r3, [r5, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a98:	4ba2      	ldr	r3, [pc, #648]	; (8002d24 <UART_SetConfig+0x2f4>)
 8002a9a:	429d      	cmp	r5, r3
 8002a9c:	d11c      	bne.n	8002ad8 <UART_SetConfig+0xa8>
 8002a9e:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa6:	2b28      	cmp	r3, #40	; 0x28
 8002aa8:	f200 825e 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002aac:	4a9f      	ldr	r2, [pc, #636]	; (8002d2c <UART_SetConfig+0x2fc>)
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	f040 81e6 	bne.w	8002e84 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	f000 81ba 	beq.w	8002e32 <UART_SetConfig+0x402>
 8002abe:	f200 816e 	bhi.w	8002d9e <UART_SetConfig+0x36e>
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f000 8197 	beq.w	8002df6 <UART_SetConfig+0x3c6>
 8002ac8:	f0c0 817d 	bcc.w	8002dc6 <UART_SetConfig+0x396>
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	f000 8195 	beq.w	8002dfc <UART_SetConfig+0x3cc>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	e186      	b.n	8002de6 <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad8:	4b95      	ldr	r3, [pc, #596]	; (8002d30 <UART_SetConfig+0x300>)
 8002ada:	429d      	cmp	r5, r3
 8002adc:	d108      	bne.n	8002af0 <UART_SetConfig+0xc0>
 8002ade:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	f200 823e 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002aec:	4a91      	ldr	r2, [pc, #580]	; (8002d34 <UART_SetConfig+0x304>)
 8002aee:	e7de      	b.n	8002aae <UART_SetConfig+0x7e>
 8002af0:	4b91      	ldr	r3, [pc, #580]	; (8002d38 <UART_SetConfig+0x308>)
 8002af2:	429d      	cmp	r5, r3
 8002af4:	d108      	bne.n	8002b08 <UART_SetConfig+0xd8>
 8002af6:	4b8c      	ldr	r3, [pc, #560]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	f200 8232 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002b04:	4a8d      	ldr	r2, [pc, #564]	; (8002d3c <UART_SetConfig+0x30c>)
 8002b06:	e7d2      	b.n	8002aae <UART_SetConfig+0x7e>
 8002b08:	4b8d      	ldr	r3, [pc, #564]	; (8002d40 <UART_SetConfig+0x310>)
 8002b0a:	429d      	cmp	r5, r3
 8002b0c:	d108      	bne.n	8002b20 <UART_SetConfig+0xf0>
 8002b0e:	4b86      	ldr	r3, [pc, #536]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	f200 8226 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002b1c:	4a89      	ldr	r2, [pc, #548]	; (8002d44 <UART_SetConfig+0x314>)
 8002b1e:	e7c6      	b.n	8002aae <UART_SetConfig+0x7e>
 8002b20:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <UART_SetConfig+0x318>)
 8002b22:	429d      	cmp	r5, r3
 8002b24:	d108      	bne.n	8002b38 <UART_SetConfig+0x108>
 8002b26:	4b80      	ldr	r3, [pc, #512]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	f200 821a 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002b34:	4a85      	ldr	r2, [pc, #532]	; (8002d4c <UART_SetConfig+0x31c>)
 8002b36:	e7ba      	b.n	8002aae <UART_SetConfig+0x7e>
 8002b38:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <UART_SetConfig+0x320>)
 8002b3a:	429d      	cmp	r5, r3
 8002b3c:	d108      	bne.n	8002b50 <UART_SetConfig+0x120>
 8002b3e:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b46:	2b28      	cmp	r3, #40	; 0x28
 8002b48:	f200 820e 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002b4c:	4a81      	ldr	r2, [pc, #516]	; (8002d54 <UART_SetConfig+0x324>)
 8002b4e:	e7ae      	b.n	8002aae <UART_SetConfig+0x7e>
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <UART_SetConfig+0x328>)
 8002b52:	429d      	cmp	r5, r3
 8002b54:	d108      	bne.n	8002b68 <UART_SetConfig+0x138>
 8002b56:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	f200 8202 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002b64:	4a7d      	ldr	r2, [pc, #500]	; (8002d5c <UART_SetConfig+0x32c>)
 8002b66:	e7a2      	b.n	8002aae <UART_SetConfig+0x7e>
 8002b68:	4b7d      	ldr	r3, [pc, #500]	; (8002d60 <UART_SetConfig+0x330>)
 8002b6a:	429d      	cmp	r5, r3
 8002b6c:	d108      	bne.n	8002b80 <UART_SetConfig+0x150>
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	f200 81f6 	bhi.w	8002f68 <UART_SetConfig+0x538>
 8002b7c:	4a79      	ldr	r2, [pc, #484]	; (8002d64 <UART_SetConfig+0x334>)
 8002b7e:	e796      	b.n	8002aae <UART_SetConfig+0x7e>
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <UART_SetConfig+0x2f0>)
 8002b82:	429d      	cmp	r5, r3
 8002b84:	f040 81f0 	bne.w	8002f68 <UART_SetConfig+0x538>
 8002b88:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b8e:	f002 0207 	and.w	r2, r2, #7
 8002b92:	2a05      	cmp	r2, #5
 8002b94:	d901      	bls.n	8002b9a <UART_SetConfig+0x16a>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
      break;
    }
  }

  return ret;
 8002b98:	e080      	b.n	8002c9c <UART_SetConfig+0x26c>
 8002b9a:	4973      	ldr	r1, [pc, #460]	; (8002d68 <UART_SetConfig+0x338>)
 8002b9c:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 8002b9e:	2d08      	cmp	r5, #8
 8002ba0:	d02f      	beq.n	8002c02 <UART_SetConfig+0x1d2>
 8002ba2:	d808      	bhi.n	8002bb6 <UART_SetConfig+0x186>
 8002ba4:	2d02      	cmp	r5, #2
 8002ba6:	d021      	beq.n	8002bec <UART_SetConfig+0x1bc>
 8002ba8:	2d04      	cmp	r5, #4
 8002baa:	d1f4      	bne.n	8002b96 <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002bac:	4668      	mov	r0, sp
 8002bae:	f7ff fadd 	bl	800216c <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8002bb2:	9801      	ldr	r0, [sp, #4]
      break;
 8002bb4:	e01c      	b.n	8002bf0 <UART_SetConfig+0x1c0>
    switch (clocksource)
 8002bb6:	2d20      	cmp	r5, #32
 8002bb8:	d005      	beq.n	8002bc6 <UART_SetConfig+0x196>
 8002bba:	2d40      	cmp	r5, #64	; 0x40
 8002bbc:	d01c      	beq.n	8002bf8 <UART_SetConfig+0x1c8>
 8002bbe:	2d10      	cmp	r5, #16
 8002bc0:	d1e9      	bne.n	8002b96 <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 8002bc2:	486a      	ldr	r0, [pc, #424]	; (8002d6c <UART_SetConfig+0x33c>)
 8002bc4:	e001      	b.n	8002bca <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 8002bc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002bca:	6866      	ldr	r6, [r4, #4]
 8002bcc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002bd0:	4283      	cmp	r3, r0
 8002bd2:	d8e0      	bhi.n	8002b96 <UART_SetConfig+0x166>
 8002bd4:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8002bd8:	d8dd      	bhi.n	8002b96 <UART_SetConfig+0x166>
        switch (clocksource)
 8002bda:	2d08      	cmp	r5, #8
 8002bdc:	d078      	beq.n	8002cd0 <UART_SetConfig+0x2a0>
 8002bde:	d81a      	bhi.n	8002c16 <UART_SetConfig+0x1e6>
 8002be0:	2d02      	cmp	r5, #2
 8002be2:	d038      	beq.n	8002c56 <UART_SetConfig+0x226>
 8002be4:	2d04      	cmp	r5, #4
 8002be6:	d05d      	beq.n	8002ca4 <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04f      	b.n	8002c8c <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002bec:	f7ff faa8 	bl	8002140 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d1ea      	bne.n	8002bca <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
      break;
 8002bf6:	e051      	b.n	8002c9c <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002bf8:	a803      	add	r0, sp, #12
 8002bfa:	f7ff fb57 	bl	80022ac <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8002bfe:	9804      	ldr	r0, [sp, #16]
      break;
 8002c00:	e7f6      	b.n	8002bf0 <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	485a      	ldr	r0, [pc, #360]	; (8002d70 <UART_SetConfig+0x340>)
 8002c06:	f012 0f20 	tst.w	r2, #32
 8002c0a:	d0de      	beq.n	8002bca <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002c12:	40d8      	lsrs	r0, r3
 8002c14:	e7d9      	b.n	8002bca <UART_SetConfig+0x19a>
        switch (clocksource)
 8002c16:	2d20      	cmp	r5, #32
 8002c18:	f000 80b0 	beq.w	8002d7c <UART_SetConfig+0x34c>
 8002c1c:	2d40      	cmp	r5, #64	; 0x40
 8002c1e:	d04c      	beq.n	8002cba <UART_SetConfig+0x28a>
 8002c20:	2d10      	cmp	r5, #16
 8002c22:	d1e1      	bne.n	8002be8 <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <UART_SetConfig+0x344>)
 8002c26:	2100      	movs	r1, #0
 8002c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c2a:	4850      	ldr	r0, [pc, #320]	; (8002d6c <UART_SetConfig+0x33c>)
 8002c2c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c30:	2300      	movs	r3, #0
 8002c32:	f7fd fb51 	bl	80002d8 <__aeabi_uldivmod>
 8002c36:	4632      	mov	r2, r6
 8002c38:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002c42:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002c46:	0870      	lsrs	r0, r6, #1
 8002c48:	eb18 0500 	adds.w	r5, r8, r0
 8002c4c:	f149 0600 	adc.w	r6, r9, #0
 8002c50:	4628      	mov	r0, r5
 8002c52:	4631      	mov	r1, r6
 8002c54:	e017      	b.n	8002c86 <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002c56:	f7ff fa73 	bl	8002140 <HAL_RCCEx_GetD3PCLK1Freq>
 8002c5a:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <UART_SetConfig+0x344>)
 8002c5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c5e:	6865      	ldr	r5, [r4, #4]
 8002c60:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c64:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c66:	2100      	movs	r1, #0
 8002c68:	f7fd fb36 	bl	80002d8 <__aeabi_uldivmod>
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	020f      	lsls	r7, r1, #8
 8002c70:	2300      	movs	r3, #0
 8002c72:	0206      	lsls	r6, r0, #8
 8002c74:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002c78:	0868      	lsrs	r0, r5, #1
 8002c7a:	eb16 0800 	adds.w	r8, r6, r0
 8002c7e:	f147 0900 	adc.w	r9, r7, #0
 8002c82:	4640      	mov	r0, r8
 8002c84:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002c86:	f7fd fb27 	bl	80002d8 <__aeabi_uldivmod>
          break;
 8002c8a:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002c8c:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002c90:	4a39      	ldr	r2, [pc, #228]	; (8002d78 <UART_SetConfig+0x348>)
 8002c92:	4291      	cmp	r1, r2
 8002c94:	f63f af7f 	bhi.w	8002b96 <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	60d0      	str	r0, [r2, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	b007      	add	sp, #28
 8002ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ca4:	4668      	mov	r0, sp
 8002ca6:	f7ff fa61 	bl	800216c <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <UART_SetConfig+0x344>)
 8002cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cae:	6865      	ldr	r5, [r4, #4]
 8002cb0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9801      	ldr	r0, [sp, #4]
 8002cb8:	e7d5      	b.n	8002c66 <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002cba:	a803      	add	r0, sp, #12
 8002cbc:	f7ff faf6 	bl	80022ac <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002cc0:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <UART_SetConfig+0x344>)
 8002cc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cc4:	6865      	ldr	r5, [r4, #4]
 8002cc6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9804      	ldr	r0, [sp, #16]
 8002cce:	e7ca      	b.n	8002c66 <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd0:	4915      	ldr	r1, [pc, #84]	; (8002d28 <UART_SetConfig+0x2f8>)
 8002cd2:	0877      	lsrs	r7, r6, #1
 8002cd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cd6:	680d      	ldr	r5, [r1, #0]
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <UART_SetConfig+0x344>)
 8002cda:	f015 0520 	ands.w	r5, r5, #32
 8002cde:	d017      	beq.n	8002d10 <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002ce0:	6809      	ldr	r1, [r1, #0]
 8002ce2:	4823      	ldr	r0, [pc, #140]	; (8002d70 <UART_SetConfig+0x340>)
 8002ce4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002ce8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002cec:	2300      	movs	r3, #0
 8002cee:	40c8      	lsrs	r0, r1
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	f7fd faf1 	bl	80002d8 <__aeabi_uldivmod>
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002d02:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002d06:	eb18 0007 	adds.w	r0, r8, r7
 8002d0a:	f149 0100 	adc.w	r1, r9, #0
 8002d0e:	e7ba      	b.n	8002c86 <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002d10:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002d14:	2300      	movs	r3, #0
 8002d16:	4816      	ldr	r0, [pc, #88]	; (8002d70 <UART_SetConfig+0x340>)
 8002d18:	e7ea      	b.n	8002cf0 <UART_SetConfig+0x2c0>
 8002d1a:	bf00      	nop
 8002d1c:	cfff69f3 	.word	0xcfff69f3
 8002d20:	58000c00 	.word	0x58000c00
 8002d24:	40011000 	.word	0x40011000
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	08004503 	.word	0x08004503
 8002d30:	40004400 	.word	0x40004400
 8002d34:	0800452c 	.word	0x0800452c
 8002d38:	40004800 	.word	0x40004800
 8002d3c:	0800452c 	.word	0x0800452c
 8002d40:	40004c00 	.word	0x40004c00
 8002d44:	0800452c 	.word	0x0800452c
 8002d48:	40005000 	.word	0x40005000
 8002d4c:	0800452c 	.word	0x0800452c
 8002d50:	40011400 	.word	0x40011400
 8002d54:	08004503 	.word	0x08004503
 8002d58:	40007800 	.word	0x40007800
 8002d5c:	0800452c 	.word	0x0800452c
 8002d60:	40007c00 	.word	0x40007c00
 8002d64:	0800452c 	.word	0x0800452c
 8002d68:	08004532 	.word	0x08004532
 8002d6c:	003d0900 	.word	0x003d0900
 8002d70:	03d09000 	.word	0x03d09000
 8002d74:	08004538 	.word	0x08004538
 8002d78:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002d7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d7e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8002d82:	4b7c      	ldr	r3, [pc, #496]	; (8002f74 <UART_SetConfig+0x544>)
 8002d84:	0870      	lsrs	r0, r6, #1
 8002d86:	2100      	movs	r1, #0
 8002d88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002d92:	fbb5 f5f3 	udiv	r5, r5, r3
 8002d96:	2300      	movs	r3, #0
 8002d98:	fbe5 0106 	umlal	r0, r1, r5, r6
 8002d9c:	e773      	b.n	8002c86 <UART_SetConfig+0x256>
    switch (clocksource)
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d068      	beq.n	8002e74 <UART_SetConfig+0x444>
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d03b      	beq.n	8002e1e <UART_SetConfig+0x3ee>
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	f47f ae93 	bne.w	8002ad2 <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002dac:	4b71      	ldr	r3, [pc, #452]	; (8002f74 <UART_SetConfig+0x544>)
 8002dae:	4a72      	ldr	r2, [pc, #456]	; (8002f78 <UART_SetConfig+0x548>)
 8002db0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002db4:	6860      	ldr	r0, [r4, #4]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	0842      	lsrs	r2, r0, #1
 8002dbc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002dc0:	fbb2 f2f0 	udiv	r2, r2, r0
 8002dc4:	e00d      	b.n	8002de2 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002dc6:	f7fe fc53 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002dca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002dcc:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <UART_SetConfig+0x544>)
 8002dce:	6863      	ldr	r3, [r4, #4]
 8002dd0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002dd4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002dd8:	085a      	lsrs	r2, r3, #1
 8002dda:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de2:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de4:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002de6:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dea:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	60c2      	str	r2, [r0, #12]
 8002df4:	e752      	b.n	8002c9c <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002df6:	f7fe fc51 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8002dfa:	e7e6      	b.n	8002dca <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002dfc:	4668      	mov	r0, sp
 8002dfe:	f7ff f9b5 	bl	800216c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e02:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <UART_SetConfig+0x544>)
 8002e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e06:	6861      	ldr	r1, [r4, #4]
 8002e08:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002e0c:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e12:	084a      	lsrs	r2, r1, #1
 8002e14:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002e18:	fbb2 f2f1 	udiv	r2, r2, r1
 8002e1c:	e7e1      	b.n	8002de2 <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e1e:	a803      	add	r0, sp, #12
 8002e20:	f7ff fa44 	bl	80022ac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <UART_SetConfig+0x544>)
 8002e26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e28:	6861      	ldr	r1, [r4, #4]
 8002e2a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002e2e:	9b04      	ldr	r3, [sp, #16]
 8002e30:	e7ed      	b.n	8002e0e <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e32:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <UART_SetConfig+0x54c>)
 8002e34:	4852      	ldr	r0, [pc, #328]	; (8002f80 <UART_SetConfig+0x550>)
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	6865      	ldr	r5, [r4, #4]
 8002e3a:	f013 0320 	ands.w	r3, r3, #32
 8002e3e:	4e4d      	ldr	r6, [pc, #308]	; (8002f74 <UART_SetConfig+0x544>)
 8002e40:	d00d      	beq.n	8002e5e <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002e48:	40d0      	lsrs	r0, r2
 8002e4a:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8002e4e:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e52:	086a      	lsrs	r2, r5, #1
 8002e54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002e58:	fbb2 f2f5 	udiv	r2, r2, r5
 8002e5c:	e7c1      	b.n	8002de2 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e5e:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8002e62:	fbb0 f0f2 	udiv	r0, r0, r2
 8002e66:	086a      	lsrs	r2, r5, #1
 8002e68:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002e6c:	fbb2 f2f5 	udiv	r2, r2, r5
 8002e70:	b292      	uxth	r2, r2
 8002e72:	e7b8      	b.n	8002de6 <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <UART_SetConfig+0x544>)
 8002e76:	6865      	ldr	r5, [r4, #4]
 8002e78:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002e7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e80:	b280      	uxth	r0, r0
 8002e82:	e7e6      	b.n	8002e52 <UART_SetConfig+0x422>
    switch (clocksource)
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d046      	beq.n	8002f16 <UART_SetConfig+0x4e6>
 8002e88:	d818      	bhi.n	8002ebc <UART_SetConfig+0x48c>
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d035      	beq.n	8002efa <UART_SetConfig+0x4ca>
 8002e8e:	d324      	bcc.n	8002eda <UART_SetConfig+0x4aa>
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	f47f ae80 	bne.w	8002b96 <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e96:	4668      	mov	r0, sp
 8002e98:	f7ff f968 	bl	800216c <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002e9c:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <UART_SetConfig+0x544>)
 8002e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ea0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002ea4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002ea8:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002eaa:	fbb3 f3f0 	udiv	r3, r3, r0
 8002eae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	60cb      	str	r3, [r1, #12]
 8002eba:	e69b      	b.n	8002bf4 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d04c      	beq.n	8002f5a <UART_SetConfig+0x52a>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d01d      	beq.n	8002f00 <UART_SetConfig+0x4d0>
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	f47f ae66 	bne.w	8002b96 <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <UART_SetConfig+0x544>)
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed8:	e008      	b.n	8002eec <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002eda:	f7fe fbc9 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002ede:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <UART_SetConfig+0x544>)
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002ee8:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002eec:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	60eb      	str	r3, [r5, #12]
 8002ef8:	e67c      	b.n	8002bf4 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002efa:	f7fe fbcf 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8002efe:	e7ee      	b.n	8002ede <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f00:	a803      	add	r0, sp, #12
 8002f02:	f7ff f9d3 	bl	80022ac <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <UART_SetConfig+0x544>)
 8002f08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f0a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002f0e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002f12:	9b04      	ldr	r3, [sp, #16]
 8002f14:	e7c9      	b.n	8002eaa <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f16:	4e19      	ldr	r6, [pc, #100]	; (8002f7c <UART_SetConfig+0x54c>)
 8002f18:	6860      	ldr	r0, [r4, #4]
 8002f1a:	6833      	ldr	r3, [r6, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <UART_SetConfig+0x550>)
 8002f1e:	f013 0320 	ands.w	r3, r3, #32
 8002f22:	4c14      	ldr	r4, [pc, #80]	; (8002f74 <UART_SetConfig+0x544>)
 8002f24:	d00e      	beq.n	8002f44 <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002f26:	6833      	ldr	r3, [r6, #0]
 8002f28:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f2c:	40da      	lsrs	r2, r3
 8002f2e:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 8002f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f36:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002f3a:	fbb2 f2f0 	udiv	r2, r2, r0
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	60ea      	str	r2, [r5, #12]
 8002f42:	e657      	b.n	8002bf4 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f44:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8002f48:	fbb2 f2f1 	udiv	r2, r2, r1
 8002f4c:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002f50:	fbb2 f2f0 	udiv	r2, r2, r0
 8002f54:	b292      	uxth	r2, r2
 8002f56:	60ea      	str	r2, [r5, #12]
 8002f58:	e6a0      	b.n	8002c9c <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <UART_SetConfig+0x544>)
 8002f5c:	6862      	ldr	r2, [r4, #4]
 8002f5e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	e7b5      	b.n	8002ed4 <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f6c:	f47f ae13 	bne.w	8002b96 <UART_SetConfig+0x166>
 8002f70:	e5af      	b.n	8002ad2 <UART_SetConfig+0xa2>
 8002f72:	bf00      	nop
 8002f74:	08004538 	.word	0x08004538
 8002f78:	003d0900 	.word	0x003d0900
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	03d09000 	.word	0x03d09000

08002f84 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f86:	07da      	lsls	r2, r3, #31
{
 8002f88:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f8a:	d506      	bpl.n	8002f9a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f8c:	6801      	ldr	r1, [r0, #0]
 8002f8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f90:	684a      	ldr	r2, [r1, #4]
 8002f92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f96:	4322      	orrs	r2, r4
 8002f98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f9a:	079c      	lsls	r4, r3, #30
 8002f9c:	d506      	bpl.n	8002fac <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f9e:	6801      	ldr	r1, [r0, #0]
 8002fa0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002fa2:	684a      	ldr	r2, [r1, #4]
 8002fa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fa8:	4322      	orrs	r2, r4
 8002faa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fac:	0759      	lsls	r1, r3, #29
 8002fae:	d506      	bpl.n	8002fbe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb0:	6801      	ldr	r1, [r0, #0]
 8002fb2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002fb4:	684a      	ldr	r2, [r1, #4]
 8002fb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fba:	4322      	orrs	r2, r4
 8002fbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fbe:	071a      	lsls	r2, r3, #28
 8002fc0:	d506      	bpl.n	8002fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc2:	6801      	ldr	r1, [r0, #0]
 8002fc4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002fc6:	684a      	ldr	r2, [r1, #4]
 8002fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fcc:	4322      	orrs	r2, r4
 8002fce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd0:	06dc      	lsls	r4, r3, #27
 8002fd2:	d506      	bpl.n	8002fe2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd4:	6801      	ldr	r1, [r0, #0]
 8002fd6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002fd8:	688a      	ldr	r2, [r1, #8]
 8002fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fde:	4322      	orrs	r2, r4
 8002fe0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fe2:	0699      	lsls	r1, r3, #26
 8002fe4:	d506      	bpl.n	8002ff4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fe6:	6801      	ldr	r1, [r0, #0]
 8002fe8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002fea:	688a      	ldr	r2, [r1, #8]
 8002fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff0:	4322      	orrs	r2, r4
 8002ff2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff4:	065a      	lsls	r2, r3, #25
 8002ff6:	d510      	bpl.n	800301a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ff8:	6801      	ldr	r1, [r0, #0]
 8002ffa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002ffc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ffe:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003002:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003006:	ea42 0204 	orr.w	r2, r2, r4
 800300a:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800300c:	d105      	bne.n	800301a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800300e:	684a      	ldr	r2, [r1, #4]
 8003010:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003012:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003016:	4322      	orrs	r2, r4
 8003018:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	d506      	bpl.n	800302c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800301e:	6802      	ldr	r2, [r0, #0]
 8003020:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003022:	6853      	ldr	r3, [r2, #4]
 8003024:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003028:	430b      	orrs	r3, r1
 800302a:	6053      	str	r3, [r2, #4]
 800302c:	bd10      	pop	{r4, pc}

0800302e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800302e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003032:	9d06      	ldr	r5, [sp, #24]
 8003034:	4604      	mov	r4, r0
 8003036:	460f      	mov	r7, r1
 8003038:	4616      	mov	r6, r2
 800303a:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303c:	6821      	ldr	r1, [r4, #0]
 800303e:	69ca      	ldr	r2, [r1, #28]
 8003040:	ea37 0302 	bics.w	r3, r7, r2
 8003044:	bf0c      	ite	eq
 8003046:	2201      	moveq	r2, #1
 8003048:	2200      	movne	r2, #0
 800304a:	42b2      	cmp	r2, r6
 800304c:	d002      	beq.n	8003054 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800304e:	2000      	movs	r0, #0
}
 8003050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003054:	1c6b      	adds	r3, r5, #1
 8003056:	d0f2      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003058:	b99d      	cbnz	r5, 8003082 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800305c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003064:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800306e:	2320      	movs	r3, #32
 8003070:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8003074:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8003078:	2300      	movs	r3, #0
 800307a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 800307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003082:	f7fd faf1 	bl	8000668 <HAL_GetTick>
 8003086:	eba0 0008 	sub.w	r0, r0, r8
 800308a:	4285      	cmp	r5, r0
 800308c:	d2d6      	bcs.n	800303c <UART_WaitOnFlagUntilTimeout+0xe>
 800308e:	e7e4      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0x2c>

08003090 <UART_CheckIdleState>:
{
 8003090:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	2600      	movs	r6, #0
{
 8003094:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003098:	f7fd fae6 	bl	8000668 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800309c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800309e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	071a      	lsls	r2, r3, #28
 80030a4:	d417      	bmi.n	80030d6 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	075b      	lsls	r3, r3, #29
 80030ac:	d50a      	bpl.n	80030c4 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030b8:	4620      	mov	r0, r4
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	462b      	mov	r3, r5
 80030be:	f7ff ffb6 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 80030c2:	b9a0      	cbnz	r0, 80030ee <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80030c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80030c6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 80030cc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 80030d4:	e00c      	b.n	80030f0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030da:	4632      	mov	r2, r6
 80030dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4603      	mov	r3, r0
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7ff ffa2 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d0db      	beq.n	80030a6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80030ee:	2003      	movs	r0, #3
}
 80030f0:	b002      	add	sp, #8
 80030f2:	bd70      	pop	{r4, r5, r6, pc}

080030f4 <HAL_UART_Init>:
{
 80030f4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80030f6:	4604      	mov	r4, r0
 80030f8:	b360      	cbz	r0, 8003154 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80030fa:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 80030fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003102:	b91b      	cbnz	r3, 800310c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003104:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003108:	f001 f8e8 	bl	80042dc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800310c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800310e:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003110:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003112:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800311e:	f7ff fc87 	bl	8002a30 <UART_SetConfig>
 8003122:	2801      	cmp	r0, #1
 8003124:	d016      	beq.n	8003154 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003128:	b113      	cbz	r3, 8003130 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800312a:	4620      	mov	r0, r4
 800312c:	f7ff ff2a 	bl	8002f84 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003130:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003132:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003142:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
}
 800314a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800314e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003150:	f7ff bf9e 	b.w	8003090 <UART_CheckIdleState>
}
 8003154:	2001      	movs	r0, #1
 8003156:	bd10      	pop	{r4, pc}

08003158 <USART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Tickstart: tick start value.
  * @param  Timeout: timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	4604      	mov	r4, r0
 800315c:	460e      	mov	r6, r1
 800315e:	4617      	mov	r7, r2
 8003160:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003162:	6821      	ldr	r1, [r4, #0]
 8003164:	69cb      	ldr	r3, [r1, #28]
 8003166:	ea36 0303 	bics.w	r3, r6, r3
 800316a:	d101      	bne.n	8003170 <USART_WaitOnFlagUntilTimeout.constprop.3+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800316c:	2000      	movs	r0, #0
}
 800316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003170:	1c6b      	adds	r3, r5, #1
 8003172:	d0f7      	beq.n	8003164 <USART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003174:	b985      	cbnz	r5, 8003198 <USART_WaitOnFlagUntilTimeout.constprop.3+0x40>
        CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003176:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(husart);
 8003178:	2003      	movs	r0, #3
        CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003180:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	609a      	str	r2, [r3, #8]
        husart->State= HAL_USART_STATE_READY;
 800318a:	2301      	movs	r3, #1
 800318c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(husart);
 8003190:	2300      	movs	r3, #0
 8003192:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003198:	f7fd fa66 	bl	8000668 <HAL_GetTick>
 800319c:	1bc0      	subs	r0, r0, r7
 800319e:	4285      	cmp	r5, r0
 80031a0:	d2df      	bcs.n	8003162 <USART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80031a2:	e7e8      	b.n	8003176 <USART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080031a4 <HAL_USART_Init>:
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
  if(husart == NULL)
 80031a6:	4604      	mov	r4, r0
{
 80031a8:	b086      	sub	sp, #24
  if(husart == NULL)
 80031aa:	b918      	cbnz	r0, 80031b4 <HAL_USART_Init+0x10>
    return HAL_ERROR;
 80031ac:	2501      	movs	r5, #1
}
 80031ae:	4628      	mov	r0, r5
 80031b0:	b006      	add	sp, #24
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
  if(husart->State == HAL_USART_STATE_RESET)
 80031b4:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80031b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031bc:	b91b      	cbnz	r3, 80031c6 <HAL_USART_Init+0x22>
    husart->Lock = HAL_UNLOCKED;
 80031be:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_USART_MspInit(husart);
 80031c2:	f001 f911 	bl	80043e8 <HAL_USART_MspInit>
  __HAL_USART_DISABLE(husart);
 80031c6:	6822      	ldr	r2, [r4, #0]
  husart->State = HAL_USART_STATE_BUSY;
 80031c8:	2302      	movs	r3, #2
  assert_param(IS_USART_MODE(husart->Init.Mode));
  assert_param(IS_USART_PRESCALER(husart->Init.Prescaler));
  assert_param(IS_USART_NSS(husart->Init.NSS));
  assert_param(IS_USART_SLAVEMODE(husart->Init.SlaveMode));
  assert_param(IS_USART_FIFO_MODE_STATE(husart->Init.FIFOMode));
  if (husart->Init.FIFOMode == USART_FIFOMODE_ENABLE)
 80031ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  husart->State = HAL_USART_STATE_BUSY;
 80031cc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_USART_DISABLE(husart);
 80031d0:	6813      	ldr	r3, [r2, #0]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear and configure the TXFTCFG & RXFTCFG bits:
   * set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  if (husart->Init.FIFOMode == USART_FIFOMODE_ENABLE)
 80031d2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  tmpreg |=  (uint32_t)husart->Init.FIFOMode;
 80031d6:	6920      	ldr	r0, [r4, #16]
  __HAL_USART_DISABLE(husart);
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
  tmpreg |=  (uint32_t)husart->Init.FIFOMode;
 80031de:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	6815      	ldr	r5, [r2, #0]
  tmpreg |=  (uint32_t)husart->Init.FIFOMode;
 80031e2:	ea43 0301 	orr.w	r3, r3, r1
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	ea43 0300 	orr.w	r3, r3, r0
 80031ee:	6960      	ldr	r0, [r4, #20]
 80031f0:	ea43 0300 	orr.w	r3, r3, r0
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f4:	4888      	ldr	r0, [pc, #544]	; (8003418 <HAL_USART_Init+0x274>)
 80031f6:	ea00 0005 	and.w	r0, r0, r5
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase | (uint32_t)husart->Init.NSS);
 80031fa:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031fc:	ea43 0300 	orr.w	r3, r3, r0
 8003200:	6013      	str	r3, [r2, #0]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase | (uint32_t)husart->Init.NSS);
 8003202:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003204:	6850      	ldr	r0, [r2, #4]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase | (uint32_t)husart->Init.NSS);
 8003206:	ea43 0305 	orr.w	r3, r3, r5
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits | (uint32_t)husart->Init.SlaveMode);
 800320a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800320c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits | (uint32_t)husart->Init.SlaveMode);
 8003210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003214:	f020 0009 	bic.w	r0, r0, #9
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits | (uint32_t)husart->Init.SlaveMode);
 8003218:	ea43 0305 	orr.w	r3, r3, r5
 800321c:	6a25      	ldr	r5, [r4, #32]
 800321e:	ea43 0305 	orr.w	r3, r3, r5
 8003222:	68e5      	ldr	r5, [r4, #12]
 8003224:	ea43 0305 	orr.w	r3, r3, r5
 8003228:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800322a:	ea43 0305 	orr.w	r3, r3, r5
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800322e:	ea43 0300 	orr.w	r3, r3, r0
 8003232:	6053      	str	r3, [r2, #4]
  if (husart->Init.FIFOMode == USART_FIFOMODE_ENABLE)
 8003234:	d107      	bne.n	8003246 <HAL_USART_Init+0xa2>
  {
    tmpreg = ((uint32_t)husart->Init.TXFIFOThreshold | (uint32_t)husart->Init.RXFIFOThreshold );
    MODIFY_REG(husart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003236:	6891      	ldr	r1, [r2, #8]
    tmpreg = ((uint32_t)husart->Init.TXFIFOThreshold | (uint32_t)husart->Init.RXFIFOThreshold );
 8003238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800323a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    MODIFY_REG(husart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800323c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
    tmpreg = ((uint32_t)husart->Init.TXFIFOThreshold | (uint32_t)husart->Init.RXFIFOThreshold );
 8003240:	4303      	orrs	r3, r0
    MODIFY_REG(husart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003242:	430b      	orrs	r3, r1
 8003244:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.Prescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.Prescaler);
 8003246:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800324a:	f023 030f 	bic.w	r3, r3, #15
 800324e:	430b      	orrs	r3, r1
 8003250:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003252:	4b72      	ldr	r3, [pc, #456]	; (800341c <HAL_USART_Init+0x278>)
 8003254:	429a      	cmp	r2, r3
 8003256:	d112      	bne.n	800327e <HAL_USART_Init+0xda>
 8003258:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_USART_Init+0x27c>)
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003260:	2b28      	cmp	r3, #40	; 0x28
 8003262:	d809      	bhi.n	8003278 <HAL_USART_Init+0xd4>
 8003264:	4a6f      	ldr	r2, [pc, #444]	; (8003424 <HAL_USART_Init+0x280>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
  switch (clocksource)
 8003268:	2b08      	cmp	r3, #8
 800326a:	d067      	beq.n	800333c <HAL_USART_Init+0x198>
 800326c:	d828      	bhi.n	80032c0 <HAL_USART_Init+0x11c>
 800326e:	2b01      	cmp	r3, #1
 8003270:	d046      	beq.n	8003300 <HAL_USART_Init+0x15c>
 8003272:	d334      	bcc.n	80032de <HAL_USART_Init+0x13a>
 8003274:	2b04      	cmp	r3, #4
 8003276:	d046      	beq.n	8003306 <HAL_USART_Init+0x162>
  uint16_t usartdiv                    = 0x0000U;
 8003278:	2300      	movs	r3, #0
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
      break;
    case USART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 800327a:	2501      	movs	r5, #1
 800327c:	e07e      	b.n	800337c <HAL_USART_Init+0x1d8>
  USART_GETCLOCKSOURCE(husart, clocksource);
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_USART_Init+0x284>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_USART_Init+0xf0>
 8003284:	4b66      	ldr	r3, [pc, #408]	; (8003420 <HAL_USART_Init+0x27c>)
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	2b05      	cmp	r3, #5
 800328e:	d8f3      	bhi.n	8003278 <HAL_USART_Init+0xd4>
 8003290:	4a66      	ldr	r2, [pc, #408]	; (800342c <HAL_USART_Init+0x288>)
 8003292:	e7e8      	b.n	8003266 <HAL_USART_Init+0xc2>
 8003294:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_USART_Init+0x28c>)
 8003296:	429a      	cmp	r2, r3
 8003298:	d107      	bne.n	80032aa <HAL_USART_Init+0x106>
 800329a:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_USART_Init+0x27c>)
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d8e8      	bhi.n	8003278 <HAL_USART_Init+0xd4>
 80032a6:	4a63      	ldr	r2, [pc, #396]	; (8003434 <HAL_USART_Init+0x290>)
 80032a8:	e7dd      	b.n	8003266 <HAL_USART_Init+0xc2>
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_USART_Init+0x294>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1e3      	bne.n	8003278 <HAL_USART_Init+0xd4>
 80032b0:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <HAL_USART_Init+0x27c>)
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032b8:	2b28      	cmp	r3, #40	; 0x28
 80032ba:	d8dd      	bhi.n	8003278 <HAL_USART_Init+0xd4>
 80032bc:	4a5f      	ldr	r2, [pc, #380]	; (800343c <HAL_USART_Init+0x298>)
 80032be:	e7d2      	b.n	8003266 <HAL_USART_Init+0xc2>
  switch (clocksource)
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	f000 8095 	beq.w	80033f0 <HAL_USART_Init+0x24c>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d02e      	beq.n	8003328 <HAL_USART_Init+0x184>
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d1d4      	bne.n	8003278 <HAL_USART_Init+0xd4>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
 80032ce:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <HAL_USART_Init+0x29c>)
 80032d0:	6860      	ldr	r0, [r4, #4]
 80032d2:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_USART_Init+0x2a0>)
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
 80032d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80032dc:	e03e      	b.n	800335c <HAL_USART_Init+0x1b8>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate, husart->Init.Prescaler));
 80032de:	f7fe f9c7 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate, husart->Init.Prescaler));
 80032e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032e4:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_USART_Init+0x29c>)
 80032e6:	6862      	ldr	r2, [r4, #4]
 80032e8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80032ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80032f0:	0853      	lsrs	r3, r2, #1
 80032f2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80032f6:	fbb3 f3f2 	udiv	r3, r3, r2
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
 80032fa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret                = HAL_OK;
 80032fc:	2500      	movs	r5, #0
 80032fe:	e03d      	b.n	800337c <HAL_USART_Init+0x1d8>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate, husart->Init.Prescaler));
 8003300:	f7fe f9cc 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8003304:	e7ed      	b.n	80032e2 <HAL_USART_Init+0x13e>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003306:	4668      	mov	r0, sp
 8003308:	f7fe ff30 	bl	800216c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate, husart->Init.Prescaler));
 800330c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <HAL_USART_Init+0x29c>)
 8003310:	6861      	ldr	r1, [r4, #4]
 8003312:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003316:	9a01      	ldr	r2, [sp, #4]
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate, husart->Init.Prescaler));
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	084b      	lsrs	r3, r1, #1
 800331e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003322:	fbb3 f3f1 	udiv	r3, r3, r1
 8003326:	e7e8      	b.n	80032fa <HAL_USART_Init+0x156>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003328:	a803      	add	r0, sp, #12
 800332a:	f7fe ffbf 	bl	80022ac <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate, husart->Init.Prescaler));
 800332e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_USART_Init+0x29c>)
 8003332:	6861      	ldr	r1, [r4, #4]
 8003334:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003338:	9a04      	ldr	r2, [sp, #16]
 800333a:	e7ed      	b.n	8003318 <HAL_USART_Init+0x174>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_USART_Init+0x27c>)
 800333e:	6860      	ldr	r0, [r4, #4]
 8003340:	681d      	ldr	r5, [r3, #0]
 8003342:	4e3f      	ldr	r6, [pc, #252]	; (8003440 <HAL_USART_Init+0x29c>)
 8003344:	f015 0520 	ands.w	r5, r5, #32
 8003348:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <HAL_USART_Init+0x2a4>)
 800334a:	d00d      	beq.n	8003368 <HAL_USART_Init+0x1c4>
        usartdiv = (uint16_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), husart->Init.BaudRate, husart->Init.Prescaler));
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003352:	40da      	lsrs	r2, r3
 8003354:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
 800335c:	0843      	lsrs	r3, r0, #1
 800335e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003362:	fbb3 f3f0 	udiv	r3, r3, r0
 8003366:	e7c8      	b.n	80032fa <HAL_USART_Init+0x156>
        usartdiv = (uint16_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
 8003368:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
 800336c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003370:	0843      	lsrs	r3, r0, #1
 8003372:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003376:	fbb3 f3f0 	udiv	r3, r3, r0
 800337a:	b29b      	uxth	r3, r3
      break;
  }

  brrtemp = usartdiv & 0xFFF0U;
 800337c:	f023 010f 	bic.w	r1, r3, #15
  brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003380:	f3c3 0342 	ubfx	r3, r3, #1, #3
  husart->Instance->BRR = brrtemp;
 8003384:	6822      	ldr	r2, [r4, #0]
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003386:	2d01      	cmp	r5, #1
  husart->Instance->BRR = brrtemp;
 8003388:	ea43 0301 	orr.w	r3, r3, r1
 800338c:	60d3      	str	r3, [r2, #12]
  if (USART_SetConfig(husart) == HAL_ERROR)
 800338e:	f43f af0d 	beq.w	80031ac <HAL_USART_Init+0x8>
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003392:	6853      	ldr	r3, [r2, #4]
 8003394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003398:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339a:	6893      	ldr	r3, [r2, #8]
 800339c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80033a0:	6093      	str	r3, [r2, #8]
  if (husart->Init.SlaveMode)
 80033a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033a4:	b11b      	cbz	r3, 80033ae <HAL_USART_Init+0x20a>
    CLEAR_BIT(husart->Instance->CR2, USART_CR2_CLKEN);
 80033a6:	6853      	ldr	r3, [r2, #4]
 80033a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ac:	6053      	str	r3, [r2, #4]
  __HAL_USART_ENABLE(husart);
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6013      	str	r3, [r2, #0]
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
  uint32_t tickstart = 0U;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Init tickstart for timeout managment */
  tickstart = HAL_GetTick();
 80033ba:	f7fd f955 	bl	8000668 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033be:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80033c0:	4606      	mov	r6, r0
  if((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	071a      	lsls	r2, r3, #28
 80033c6:	d41a      	bmi.n	80033fe <HAL_USART_Init+0x25a>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	075b      	lsls	r3, r3, #29
 80033ce:	d508      	bpl.n	80033e2 <HAL_USART_Init+0x23e>
  {
    /* Wait until REACK flag is set */
    if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80033d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d4:	4632      	mov	r2, r6
 80033d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff febc 	bl	8003158 <USART_WaitOnFlagUntilTimeout.constprop.3>
 80033e0:	b9b8      	cbnz	r0, 8003412 <HAL_USART_Init+0x26e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the USART state*/
  husart->State= HAL_USART_STATE_READY;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80033e8:	2300      	movs	r3, #0
 80033ea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80033ee:	e6de      	b.n	80031ae <HAL_USART_Init+0xa>
      usartdiv = (uint16_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.Prescaler));
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_USART_Init+0x29c>)
 80033f2:	6860      	ldr	r0, [r4, #4]
 80033f4:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80033f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fc:	e76c      	b.n	80032d8 <HAL_USART_Init+0x134>
    if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80033fe:	4602      	mov	r2, r0
 8003400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003404:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003408:	4620      	mov	r0, r4
 800340a:	f7ff fea5 	bl	8003158 <USART_WaitOnFlagUntilTimeout.constprop.3>
 800340e:	2800      	cmp	r0, #0
 8003410:	d0da      	beq.n	80033c8 <HAL_USART_Init+0x224>
      return HAL_TIMEOUT;
 8003412:	2503      	movs	r5, #3
 8003414:	e6cb      	b.n	80031ae <HAL_USART_Init+0xa>
 8003416:	bf00      	nop
 8003418:	cfff69f3 	.word	0xcfff69f3
 800341c:	40011000 	.word	0x40011000
 8003420:	58024400 	.word	0x58024400
 8003424:	08004556 	.word	0x08004556
 8003428:	40004400 	.word	0x40004400
 800342c:	08004550 	.word	0x08004550
 8003430:	40004800 	.word	0x40004800
 8003434:	08004550 	.word	0x08004550
 8003438:	40011400 	.word	0x40011400
 800343c:	08004556 	.word	0x08004556
 8003440:	08004580 	.word	0x08004580
 8003444:	003d0900 	.word	0x003d0900
 8003448:	03d09000 	.word	0x03d09000

0800344c <MX_FDCAN1_Init>:

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{

  hfdcan1.Instance = FDCAN1;
 800344c:	481f      	ldr	r0, [pc, #124]	; (80034cc <MX_FDCAN1_Init+0x80>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.NominalPrescaler = 1;
 800344e:	2201      	movs	r2, #1
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003450:	2102      	movs	r1, #2
{
 8003452:	b508      	push	{r3, lr}
  hfdcan1.Instance = FDCAN1;
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <MX_FDCAN1_Init+0x84>)
  hfdcan1.Init.NominalPrescaler = 1;
 8003456:	6142      	str	r2, [r0, #20]
  hfdcan1.Instance = FDCAN1;
 8003458:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800345a:	f44f 7380 	mov.w	r3, #256	; 0x100
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800345e:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8003460:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003462:	2300      	movs	r3, #0
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 1;
 8003464:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003466:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003468:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800346a:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800346c:	2204      	movs	r2, #4
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800346e:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003470:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003472:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003474:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003476:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.MessageRAMOffset = 0;
 8003478:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800347a:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800347c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800347e:	6403      	str	r3, [r0, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003480:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003482:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003484:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003486:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003488:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800348a:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800348c:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800348e:	6603      	str	r3, [r0, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003490:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003492:	6682      	str	r2, [r0, #104]	; 0x68
  hfdcan1.msgRam.StandardFilterSA = 0;
 8003494:	66c3      	str	r3, [r0, #108]	; 0x6c
  hfdcan1.msgRam.ExtendedFilterSA = 0;
 8003496:	6703      	str	r3, [r0, #112]	; 0x70
  hfdcan1.msgRam.RxFIFO0SA = 0;
 8003498:	6743      	str	r3, [r0, #116]	; 0x74
  hfdcan1.msgRam.RxFIFO1SA = 0;
 800349a:	6783      	str	r3, [r0, #120]	; 0x78
  hfdcan1.msgRam.RxBufferSA = 0;
 800349c:	67c3      	str	r3, [r0, #124]	; 0x7c
  hfdcan1.msgRam.TxEventFIFOSA = 0;
 800349e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hfdcan1.msgRam.TxBufferSA = 0;
 80034a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hfdcan1.msgRam.TxFIFOQSA = 0;
 80034a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  hfdcan1.msgRam.TTMemorySA = 0;
 80034aa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  hfdcan1.msgRam.EndAddress = 0;
 80034ae:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  hfdcan1.ErrorCode = 0;
 80034b2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80034b6:	f7fd f9a3 	bl	8000800 <HAL_FDCAN_Init>
 80034ba:	b128      	cbz	r0, 80034c8 <MX_FDCAN1_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034bc:	2160      	movs	r1, #96	; 0x60
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MX_FDCAN1_Init+0x88>)
  }

}
 80034c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80034c4:	f000 bbae 	b.w	8003c24 <_Error_Handler>
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	bf00      	nop
 80034cc:	20000034 	.word	0x20000034
 80034d0:	4000a000 	.word	0x4000a000
 80034d4:	08004598 	.word	0x08004598

080034d8 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{

  hfdcan2.Instance = FDCAN2;
 80034d8:	481f      	ldr	r0, [pc, #124]	; (8003558 <MX_FDCAN2_Init+0x80>)
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = DISABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
 80034da:	2201      	movs	r2, #1
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80034dc:	2102      	movs	r1, #2
{
 80034de:	b508      	push	{r3, lr}
  hfdcan2.Instance = FDCAN2;
 80034e0:	4b1e      	ldr	r3, [pc, #120]	; (800355c <MX_FDCAN2_Init+0x84>)
  hfdcan2.Init.NominalPrescaler = 1;
 80034e2:	6142      	str	r2, [r0, #20]
  hfdcan2.Instance = FDCAN2;
 80034e4:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80034e6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80034ea:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80034ec:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80034ee:	2300      	movs	r3, #0
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 1;
 80034f0:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80034f2:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80034f4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80034f6:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80034f8:	2204      	movs	r2, #4
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80034fa:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80034fc:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80034fe:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8003500:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003502:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.MessageRAMOffset = 0;
 8003504:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003506:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003508:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800350a:	6403      	str	r3, [r0, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800350c:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800350e:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003510:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8003512:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003514:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003516:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8003518:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800351a:	6603      	str	r3, [r0, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800351c:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800351e:	6682      	str	r2, [r0, #104]	; 0x68
  hfdcan2.msgRam.StandardFilterSA = 0;
 8003520:	66c3      	str	r3, [r0, #108]	; 0x6c
  hfdcan2.msgRam.ExtendedFilterSA = 0;
 8003522:	6703      	str	r3, [r0, #112]	; 0x70
  hfdcan2.msgRam.RxFIFO0SA = 0;
 8003524:	6743      	str	r3, [r0, #116]	; 0x74
  hfdcan2.msgRam.RxFIFO1SA = 0;
 8003526:	6783      	str	r3, [r0, #120]	; 0x78
  hfdcan2.msgRam.RxBufferSA = 0;
 8003528:	67c3      	str	r3, [r0, #124]	; 0x7c
  hfdcan2.msgRam.TxEventFIFOSA = 0;
 800352a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hfdcan2.msgRam.TxBufferSA = 0;
 800352e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hfdcan2.msgRam.TxFIFOQSA = 0;
 8003532:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  hfdcan2.msgRam.TTMemorySA = 0;
 8003536:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  hfdcan2.msgRam.EndAddress = 0;
 800353a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  hfdcan2.ErrorCode = 0;
 800353e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003542:	f7fd f95d 	bl	8000800 <HAL_FDCAN_Init>
 8003546:	b128      	cbz	r0, 8003554 <MX_FDCAN2_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003548:	2190      	movs	r1, #144	; 0x90
 800354a:	4805      	ldr	r0, [pc, #20]	; (8003560 <MX_FDCAN2_Init+0x88>)
  }

}
 800354c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003550:	f000 bb68 	b.w	8003c24 <_Error_Handler>
 8003554:	bd08      	pop	{r3, pc}
 8003556:	bf00      	nop
 8003558:	200000d0 	.word	0x200000d0
 800355c:	4000a400 	.word	0x4000a400
 8003560:	08004598 	.word	0x08004598

08003564 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(fdcanHandle->Instance==FDCAN1)
 8003564:	6803      	ldr	r3, [r0, #0]
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_FDCAN_MspInit+0x98>)
 8003568:	4293      	cmp	r3, r2
{
 800356a:	b500      	push	{lr}
 800356c:	b089      	sub	sp, #36	; 0x24
  if(fdcanHandle->Instance==FDCAN1)
 800356e:	d122      	bne.n	80035b6 <HAL_FDCAN_MspInit+0x52>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_FDCAN_MspInit+0x9c>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003576:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003578:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800357a:	d10c      	bne.n	8003596 <HAL_FDCAN_MspInit+0x32>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_FDCAN_MspInit+0xa0>)
 800357e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800358a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	9b01      	ldr	r3, [sp, #4]
  
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003596:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003598:	a903      	add	r1, sp, #12
 800359a:	481b      	ldr	r0, [pc, #108]	; (8003608 <HAL_FDCAN_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800359c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80035a8:	2309      	movs	r3, #9
 80035aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	f7fd faf4 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80035b0:	b009      	add	sp, #36	; 0x24
 80035b2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(fdcanHandle->Instance==FDCAN2)
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <HAL_FDCAN_MspInit+0xa8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d1f9      	bne.n	80035b0 <HAL_FDCAN_MspInit+0x4c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80035bc:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_FDCAN_MspInit+0x9c>)
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80035c2:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80035c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80035c6:	d10c      	bne.n	80035e2 <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_FDCAN_MspInit+0xa0>)
 80035ca:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80035d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035e2:	2360      	movs	r3, #96	; 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e4:	a903      	add	r1, sp, #12
 80035e6:	480a      	ldr	r0, [pc, #40]	; (8003610 <HAL_FDCAN_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80035f4:	2309      	movs	r3, #9
 80035f6:	9307      	str	r3, [sp, #28]
 80035f8:	e7d8      	b.n	80035ac <HAL_FDCAN_MspInit+0x48>
 80035fa:	bf00      	nop
 80035fc:	4000a000 	.word	0x4000a000
 8003600:	20000030 	.word	0x20000030
 8003604:	58024400 	.word	0x58024400
 8003608:	58020c00 	.word	0x58020c00
 800360c:	4000a400 	.word	0x4000a400
 8003610:	58020400 	.word	0x58020400

08003614 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <MX_GPIO_Init+0x1b4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 8003616:	f24c 1171 	movw	r1, #49521	; 0xc171
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800361a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800361e:	f042 0210 	orr.w	r2, r2, #16
{
 8003622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003626:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800362a:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800362c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_STBY_GPIO_Port, CAN2_STBY_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DRV3_STATUS_Pin|DRV4_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003630:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 8003632:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80037d8 <MX_GPIO_Init+0x1c4>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003636:	2502      	movs	r5, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003638:	f002 0210 	and.w	r2, r2, #16
  HAL_GPIO_WritePin(DRV3_CSN_DRVH1_GPIO_Port, DRV3_CSN_DRVH1_Pin, GPIO_PIN_SET);
 800363c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80037dc <MX_GPIO_Init+0x1c8>
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|DRV3_EN_Pin|DRV4_EN_Pin, GPIO_PIN_RESET);
 8003640:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80037e0 <MX_GPIO_Init+0x1cc>
  HAL_GPIO_WritePin(GPIOC, DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 8003644:	4648      	mov	r0, r9
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	9201      	str	r2, [sp, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
                          |DRV3_CSN_ENC_Pin|DRV2_CSN_CTR_Pin|DRV1_CSN_CTR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003648:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800364a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800364c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|DRV1_EN_Pin|DRV2_EN_Pin, GPIO_PIN_RESET);
 8003650:	4e5e      	ldr	r6, [pc, #376]	; (80037cc <MX_GPIO_Init+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	f042 0204 	orr.w	r2, r2, #4
 8003656:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800365a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800365e:	f002 0204 	and.w	r2, r2, #4
 8003662:	9202      	str	r2, [sp, #8]
 8003664:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003666:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800366a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800366e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003672:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003676:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800367a:	9203      	str	r2, [sp, #12]
 800367c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800367e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800368a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800368e:	f002 0201 	and.w	r2, r2, #1
 8003692:	9204      	str	r2, [sp, #16]
 8003694:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003696:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800369a:	f042 0202 	orr.w	r2, r2, #2
 800369e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80036a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036a6:	f002 0202 	and.w	r2, r2, #2
 80036aa:	9205      	str	r2, [sp, #20]
 80036ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 80036ba:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	9306      	str	r3, [sp, #24]
 80036c6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 80036c8:	f7fd fb56 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV3_CSN_DRVH1_GPIO_Port, DRV3_CSN_DRVH1_Pin, GPIO_PIN_SET);
 80036cc:	4650      	mov	r0, sl
 80036ce:	2201      	movs	r2, #1
 80036d0:	2102      	movs	r1, #2
 80036d2:	f7fd fb51 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|DRV3_EN_Pin|DRV4_EN_Pin, GPIO_PIN_RESET);
 80036d6:	4640      	mov	r0, r8
 80036d8:	2200      	movs	r2, #0
 80036da:	f248 0118 	movw	r1, #32792	; 0x8018
 80036de:	f7fd fb4b 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|DRV1_EN_Pin|DRV2_EN_Pin, GPIO_PIN_RESET);
 80036e2:	4630      	mov	r0, r6
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80036ea:	f7fd fb45 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DRV1_CSN_ENC_Pin|DRV2_CSN_DRV_Pin|DRV2_CSN_ENC_Pin|DRV1_CSN_DRV_Pin 
 80036ee:	4630      	mov	r0, r6
 80036f0:	2201      	movs	r2, #1
 80036f2:	f64c 4104 	movw	r1, #52228	; 0xcc04
 80036f6:	f7fd fb3f 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN2_STBY_GPIO_Port, CAN2_STBY_Pin, GPIO_PIN_SET);
 80036fa:	2201      	movs	r2, #1
 80036fc:	4640      	mov	r0, r8
 80036fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003702:	f7fd fb39 	bl	8000d78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DRV3_STATUS_Pin|DRV4_STATUS_Pin;
 8003706:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003708:	a907      	add	r1, sp, #28
 800370a:	4831      	ldr	r0, [pc, #196]	; (80037d0 <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pin = DRV3_STATUS_Pin|DRV4_STATUS_Pin;
 800370c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003710:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003712:	f7fd fa41 	bl	8000b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRV4_FAULT_Pin|DRV1_FAULT_Pin|DRV2_STATUS_Pin;
 8003716:	f44f 5342 	mov.w	r3, #12416	; 0x3080
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371a:	a907      	add	r1, sp, #28
 800371c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = DRV4_FAULT_Pin|DRV1_FAULT_Pin|DRV2_STATUS_Pin;
 8003720:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003722:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003724:	f7fd fa38 	bl	8000b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 8003728:	f24c 1371 	movw	r3, #49521	; 0xc171
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372c:	a907      	add	r1, sp, #28
 800372e:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003730:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = DRV4_CSN_CTR_Pin|DRV3_CSN_DRV_Pin|DRV4_CSN_DRV_Pin|DRV4_CSN_ENC_Pin 
 8003732:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003738:	f7fd fa2e 	bl	8000b98 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV3_CSN_DRVH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRV3_CSN_DRVH1_GPIO_Port, &GPIO_InitStruct);
 800373c:	a907      	add	r1, sp, #28
 800373e:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003740:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = DRV3_CSN_DRVH1_Pin;
 8003742:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(DRV3_CSN_DRVH1_GPIO_Port, &GPIO_InitStruct);
 8003748:	f7fd fa26 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DRV3_EN_Pin|DRV4_EN_Pin|CAN2_STBY_Pin;
 800374c:	f248 2318 	movw	r3, #33304	; 0x8218
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003750:	a907      	add	r1, sp, #28
 8003752:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003754:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DRV3_EN_Pin|DRV4_EN_Pin|CAN2_STBY_Pin;
 8003756:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375c:	f7fd fa1c 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|DRV1_CSN_ENC_Pin|DRV2_CSN_DRV_Pin|DRV2_CSN_ENC_Pin 
 8003760:	f64c 63a4 	movw	r3, #52900	; 0xcea4
                          |DRV1_CSN_DRV_Pin|CAN1_STBY_Pin|DRV1_EN_Pin|DRV2_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003764:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003766:	a907      	add	r1, sp, #28

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003768:	4f1a      	ldr	r7, [pc, #104]	; (80037d4 <MX_GPIO_Init+0x1c0>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800376a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED_RED_Pin|DRV1_CSN_ENC_Pin|DRV2_CSN_DRV_Pin|DRV2_CSN_ENC_Pin 
 800376c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003772:	f7fd fa11 	bl	8000b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003776:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	a907      	add	r1, sp, #28
 800377c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800377e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003780:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f7fd fa08 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003788:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378c:	a907      	add	r1, sp, #28
 800378e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003792:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003794:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003798:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379c:	f7fd f9fc 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV1_STATUS_Pin;
 80037a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(DRV1_STATUS_GPIO_Port, &GPIO_InitStruct);
 80037a4:	a907      	add	r1, sp, #28
 80037a6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = DRV1_STATUS_Pin;
 80037aa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037ac:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(DRV1_STATUS_GPIO_Port, &GPIO_InitStruct);
 80037ae:	f7fd f9f3 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DRV2_FAULT_Pin|DRV3_FAULT_Pin;
 80037b2:	2350      	movs	r3, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b4:	a907      	add	r1, sp, #28
 80037b6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037b8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = DRV2_FAULT_Pin|DRV3_FAULT_Pin;
 80037ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037bc:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037be:	f7fd f9eb 	bl	8000b98 <HAL_GPIO_Init>

}
 80037c2:	b00c      	add	sp, #48	; 0x30
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	58024400 	.word	0x58024400
 80037cc:	58020c00 	.word	0x58020c00
 80037d0:	58021000 	.word	0x58021000
 80037d4:	58020000 	.word	0x58020000
 80037d8:	58020800 	.word	0x58020800
 80037dc:	58021c00 	.word	0x58021c00
 80037e0:	58020400 	.word	0x58020400

080037e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037e4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80037e6:	4817      	ldr	r0, [pc, #92]	; (8003844 <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x10707DBC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037e8:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <MX_I2C1_Init+0x64>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037ec:	60c2      	str	r2, [r0, #12]
  hi2c1.Instance = I2C1;
 80037ee:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80037f0:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 80037f4:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80037f8:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80037fc:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003802:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003804:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003806:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003808:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800380a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800380c:	f7fd fab9 	bl	8000d82 <HAL_I2C_Init>
 8003810:	b118      	cbz	r0, 800381a <MX_I2C1_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003812:	2144      	movs	r1, #68	; 0x44
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <MX_I2C1_Init+0x68>)
 8003816:	f000 fa05 	bl	8003c24 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800381a:	2100      	movs	r1, #0
 800381c:	4809      	ldr	r0, [pc, #36]	; (8003844 <MX_I2C1_Init+0x60>)
 800381e:	f7fd fb01 	bl	8000e24 <HAL_I2CEx_ConfigAnalogFilter>
 8003822:	b118      	cbz	r0, 800382c <MX_I2C1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003824:	214b      	movs	r1, #75	; 0x4b
 8003826:	4809      	ldr	r0, [pc, #36]	; (800384c <MX_I2C1_Init+0x68>)
 8003828:	f000 f9fc 	bl	8003c24 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800382c:	2100      	movs	r1, #0
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_I2C1_Init+0x60>)
 8003830:	f7fd fb1e 	bl	8000e70 <HAL_I2CEx_ConfigDigitalFilter>
 8003834:	b128      	cbz	r0, 8003842 <MX_I2C1_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003836:	2152      	movs	r1, #82	; 0x52
 8003838:	4804      	ldr	r0, [pc, #16]	; (800384c <MX_I2C1_Init+0x68>)
  }

}
 800383a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800383e:	f000 b9f1 	b.w	8003c24 <_Error_Handler>
 8003842:	bd08      	pop	{r3, pc}
 8003844:	20000204 	.word	0x20000204
 8003848:	40005400 	.word	0x40005400
 800384c:	080045a7 	.word	0x080045a7

08003850 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003850:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8003852:	4817      	ldr	r0, [pc, #92]	; (80038b0 <MX_I2C3_Init+0x60>)
  hi2c3.Init.Timing = 0x10707DBC;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003854:	2201      	movs	r2, #1
  hi2c3.Instance = I2C3;
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <MX_I2C3_Init+0x64>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003858:	60c2      	str	r2, [r0, #12]
  hi2c3.Instance = I2C3;
 800385a:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800385c:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 8003860:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8003864:	f6a3 6344 	subw	r3, r3, #3652	; 0xe44
 8003868:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	6083      	str	r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800386e:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003870:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003872:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003874:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003876:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003878:	f7fd fa83 	bl	8000d82 <HAL_I2C_Init>
 800387c:	b118      	cbz	r0, 8003886 <MX_I2C3_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 800387e:	2165      	movs	r1, #101	; 0x65
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <MX_I2C3_Init+0x68>)
 8003882:	f000 f9cf 	bl	8003c24 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003886:	2100      	movs	r1, #0
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <MX_I2C3_Init+0x60>)
 800388a:	f7fd facb 	bl	8000e24 <HAL_I2CEx_ConfigAnalogFilter>
 800388e:	b118      	cbz	r0, 8003898 <MX_I2C3_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003890:	216c      	movs	r1, #108	; 0x6c
 8003892:	4809      	ldr	r0, [pc, #36]	; (80038b8 <MX_I2C3_Init+0x68>)
 8003894:	f000 f9c6 	bl	8003c24 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003898:	2100      	movs	r1, #0
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_I2C3_Init+0x60>)
 800389c:	f7fd fae8 	bl	8000e70 <HAL_I2CEx_ConfigDigitalFilter>
 80038a0:	b128      	cbz	r0, 80038ae <MX_I2C3_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038a2:	2173      	movs	r1, #115	; 0x73
 80038a4:	4804      	ldr	r0, [pc, #16]	; (80038b8 <MX_I2C3_Init+0x68>)
  }

}
 80038a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80038aa:	f000 b9bb 	b.w	8003c24 <_Error_Handler>
 80038ae:	bd08      	pop	{r3, pc}
 80038b0:	2000016c 	.word	0x2000016c
 80038b4:	40005c00 	.word	0x40005c00
 80038b8:	080045a7 	.word	0x080045a7

080038bc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80038bc:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 80038be:	4817      	ldr	r0, [pc, #92]	; (800391c <MX_I2C4_Init+0x60>)
  hi2c4.Init.Timing = 0x10707DBC;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038c0:	2201      	movs	r2, #1
  hi2c4.Instance = I2C4;
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <MX_I2C4_Init+0x64>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038c4:	60c2      	str	r2, [r0, #12]
  hi2c4.Instance = I2C4;
 80038c6:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80038c8:	f1a3 438f 	sub.w	r3, r3, #1199570944	; 0x47800000
 80038cc:	f5a3 2379 	sub.w	r3, r3, #1019904	; 0xf9000
 80038d0:	f6a3 6344 	subw	r3, r3, #3652	; 0xe44
 80038d4:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038da:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80038dc:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038de:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038e0:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038e2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80038e4:	f7fd fa4d 	bl	8000d82 <HAL_I2C_Init>
 80038e8:	b118      	cbz	r0, 80038f2 <MX_I2C4_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038ea:	2186      	movs	r1, #134	; 0x86
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <MX_I2C4_Init+0x68>)
 80038ee:	f000 f999 	bl	8003c24 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038f2:	2100      	movs	r1, #0
 80038f4:	4809      	ldr	r0, [pc, #36]	; (800391c <MX_I2C4_Init+0x60>)
 80038f6:	f7fd fa95 	bl	8000e24 <HAL_I2CEx_ConfigAnalogFilter>
 80038fa:	b118      	cbz	r0, 8003904 <MX_I2C4_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038fc:	218d      	movs	r1, #141	; 0x8d
 80038fe:	4809      	ldr	r0, [pc, #36]	; (8003924 <MX_I2C4_Init+0x68>)
 8003900:	f000 f990 	bl	8003c24 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003904:	2100      	movs	r1, #0
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_I2C4_Init+0x60>)
 8003908:	f7fd fab2 	bl	8000e70 <HAL_I2CEx_ConfigDigitalFilter>
 800390c:	b128      	cbz	r0, 800391a <MX_I2C4_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800390e:	2194      	movs	r1, #148	; 0x94
 8003910:	4804      	ldr	r0, [pc, #16]	; (8003924 <MX_I2C4_Init+0x68>)
  }

}
 8003912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003916:	f000 b985 	b.w	8003c24 <_Error_Handler>
 800391a:	bd08      	pop	{r3, pc}
 800391c:	200001b8 	.word	0x200001b8
 8003920:	58001c00 	.word	0x58001c00
 8003924:	080045a7 	.word	0x080045a7

08003928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <HAL_I2C_MspInit+0xd8>)
 800392c:	4293      	cmp	r3, r2
{
 800392e:	b570      	push	{r4, r5, r6, lr}
 8003930:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C1)
 8003932:	d11c      	bne.n	800396e <HAL_I2C_MspInit+0x46>
  
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003934:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	a903      	add	r1, sp, #12
 800393a:	4832      	ldr	r0, [pc, #200]	; (8003a04 <HAL_I2C_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800393c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800393e:	2312      	movs	r3, #18
 8003940:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003948:	2304      	movs	r3, #4
 800394a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394c:	f7fd f924 	bl	8000b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_I2C_MspInit+0xe0>)
 8003952:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003956:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800395a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800395e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800396a:	b008      	add	sp, #32
 800396c:	bd70      	pop	{r4, r5, r6, pc}
  else if(i2cHandle->Instance==I2C3)
 800396e:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <HAL_I2C_MspInit+0xe4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d126      	bne.n	80039c2 <HAL_I2C_MspInit+0x9a>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003976:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800397a:	2612      	movs	r6, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800397c:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397e:	a903      	add	r1, sp, #12
 8003980:	4823      	ldr	r0, [pc, #140]	; (8003a10 <HAL_I2C_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003982:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003984:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003986:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800398a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398c:	f7fd f904 	bl	8000b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003990:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	a903      	add	r1, sp, #12
 8003996:	481f      	ldr	r0, [pc, #124]	; (8003a14 <HAL_I2C_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003998:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800399a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039a0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	f7fd f8f9 	bl	8000b98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_I2C_MspInit+0xe0>)
 80039a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80039ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039b0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80039b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	9b01      	ldr	r3, [sp, #4]
 80039c0:	e7d3      	b.n	800396a <HAL_I2C_MspInit+0x42>
  else if(i2cHandle->Instance==I2C4)
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <HAL_I2C_MspInit+0xf0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d1d0      	bne.n	800396a <HAL_I2C_MspInit+0x42>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80039c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039cc:	a903      	add	r1, sp, #12
 80039ce:	4813      	ldr	r0, [pc, #76]	; (8003a1c <HAL_I2C_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80039d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039d2:	2312      	movs	r3, #18
 80039d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80039dc:	2304      	movs	r3, #4
 80039de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e0:	f7fd f8da 	bl	8000b98 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_I2C_MspInit+0xe0>)
 80039e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80039ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ee:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80039f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	9b02      	ldr	r3, [sp, #8]
}
 80039fe:	e7b4      	b.n	800396a <HAL_I2C_MspInit+0x42>
 8003a00:	40005400 	.word	0x40005400
 8003a04:	58020400 	.word	0x58020400
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	40005c00 	.word	0x40005c00
 8003a10:	58020800 	.word	0x58020800
 8003a14:	58020000 	.word	0x58020000
 8003a18:	58001c00 	.word	0x58001c00
 8003a1c:	58020c00 	.word	0x58020c00

08003a20 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003a20:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <SystemClock_Config+0xd0>)
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
{
 8003a28:	b530      	push	{r4, r5, lr}
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003a2a:	60da      	str	r2, [r3, #12]
{
 8003a2c:	b0cd      	sub	sp, #308	; 0x134

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	9201      	str	r2, [sp, #4]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3c:	619a      	str	r2, [r3, #24]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	0492      	lsls	r2, r2, #18
 8003a4c:	d5fc      	bpl.n	8003a48 <SystemClock_Config+0x28>
  {
    
  }
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8003a4e:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a50:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 32;
 8003a52:	2120      	movs	r1, #32
  RCC_OscInitStruct.PLL.PLLN = 129;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003a54:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8003a56:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003a58:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a5a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a5c:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003a5e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a60:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003a62:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a64:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 32;
 8003a66:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 129;
 8003a68:	2181      	movs	r1, #129	; 0x81
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a6a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 129;
 8003a6c:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a6e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003a70:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a72:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a74:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003a76:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003a78:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003a7a:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a7c:	f7fd fa1e 	bl	8000ebc <HAL_RCC_OscConfig>
 8003a80:	4601      	mov	r1, r0
 8003a82:	b100      	cbz	r0, 8003a86 <SystemClock_Config+0x66>
 8003a84:	e7fe      	b.n	8003a84 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a86:	233f      	movs	r3, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a88:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003a8a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003a8c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003a8e:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003a90:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003a92:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003a94:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a96:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a98:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a9a:	f7fd fcf5 	bl	8001488 <HAL_RCC_ClockConfig>
 8003a9e:	b100      	cbz	r0, 8003aa2 <SystemClock_Config+0x82>
 8003aa0:	e7fe      	b.n	8003aa0 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <SystemClock_Config+0xd4>)
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI3
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003aa4:	9034      	str	r0, [sp, #208]	; 0xd0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8003aa6:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003aa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8003aac:	9035      	str	r0, [sp, #212]	; 0xd4
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003aae:	9338      	str	r3, [sp, #224]	; 0xe0
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003ab0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ab4:	903a      	str	r0, [sp, #232]	; 0xe8
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003ab6:	903d      	str	r0, [sp, #244]	; 0xf4
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003ab8:	9042      	str	r0, [sp, #264]	; 0x108
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aba:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003abc:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003abe:	f7fd fecf 	bl	8001860 <HAL_RCCEx_PeriphCLKConfig>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	b100      	cbz	r0, 8003ac8 <SystemClock_Config+0xa8>
 8003ac6:	e7fe      	b.n	8003ac6 <SystemClock_Config+0xa6>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <SystemClock_Config+0xd8>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ad4:	f7fc fe26 	bl	8000724 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7fc fe39 	bl	8000750 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ade:	4622      	mov	r2, r4
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ae6:	f7fc fdd7 	bl	8000698 <HAL_NVIC_SetPriority>
}
 8003aea:	b04d      	add	sp, #308	; 0x134
 8003aec:	bd30      	pop	{r4, r5, pc}
 8003aee:	bf00      	nop
 8003af0:	58024800 	.word	0x58024800
 8003af4:	0004b01a 	.word	0x0004b01a
 8003af8:	20000008 	.word	0x20000008

08003afc <main>:
{
 8003afc:	b508      	push	{r3, lr}
  HAL_Init();
 8003afe:	f7fc fd97 	bl	8000630 <HAL_Init>
	  if(HAL_GPIO_ReadPin(DRV1_STATUS_GPIO_Port, DRV1_STATUS_Pin) ||
 8003b02:	4d43      	ldr	r5, [pc, #268]	; (8003c10 <main+0x114>)
  SystemClock_Config();
 8003b04:	f7ff ff8c 	bl	8003a20 <SystemClock_Config>
		 HAL_GPIO_ReadPin(DRV2_STATUS_GPIO_Port, DRV2_STATUS_Pin) ||
 8003b08:	4c42      	ldr	r4, [pc, #264]	; (8003c14 <main+0x118>)
  MX_GPIO_Init();
 8003b0a:	f7ff fd83 	bl	8003614 <MX_GPIO_Init>
		 HAL_GPIO_ReadPin(DRV3_STATUS_GPIO_Port, DRV3_STATUS_Pin) ||
 8003b0e:	4e42      	ldr	r6, [pc, #264]	; (8003c18 <main+0x11c>)
  MX_FDCAN1_Init();
 8003b10:	f7ff fc9c 	bl	800344c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8003b14:	f7ff fce0 	bl	80034d8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8003b18:	f7ff fe64 	bl	80037e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003b1c:	f7ff fe98 	bl	8003850 <MX_I2C3_Init>
  MX_I2C4_Init();
 8003b20:	f7ff fecc 	bl	80038bc <MX_I2C4_Init>
  MX_SPI1_Init();
 8003b24:	f000 f880 	bl	8003c28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003b28:	f000 f8b2 	bl	8003c90 <MX_SPI2_Init>
  MX_SPI3_Init();
 8003b2c:	f000 f8e4 	bl	8003cf8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8003b30:	f000 f916 	bl	8003d60 <MX_SPI4_Init>
  MX_UART4_Init();
 8003b34:	f000 fb12 	bl	800415c <MX_UART4_Init>
  MX_UART7_Init();
 8003b38:	f000 fb36 	bl	80041a8 <MX_UART7_Init>
  MX_UART8_Init();
 8003b3c:	f000 fb5a 	bl	80041f4 <MX_UART8_Init>
  MX_USART2_Init();
 8003b40:	f000 fb7e 	bl	8004240 <MX_USART2_Init>
  MX_USART3_UART_Init();
 8003b44:	f000 fba4 	bl	8004290 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8003b48:	f000 fc76 	bl	8004438 <MX_USB_OTG_FS_USB_Init>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b52:	4832      	ldr	r0, [pc, #200]	; (8003c1c <main+0x120>)
 8003b54:	f7fd f910 	bl	8000d78 <HAL_GPIO_WritePin>
  tmc6200_init(0);
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f000 fa99 	bl	8004090 <tmc6200_init>
  tmc6200_init(1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f000 fa96 	bl	8004090 <tmc6200_init>
  tmc6200_init(2);
 8003b64:	2002      	movs	r0, #2
 8003b66:	f000 fa93 	bl	8004090 <tmc6200_init>
  tmc6200_init(3);
 8003b6a:	2003      	movs	r0, #3
 8003b6c:	f000 fa90 	bl	8004090 <tmc6200_init>
  HAL_GPIO_WritePin(DRV1_EN_GPIO_Port, DRV1_EN_Pin, GPIO_PIN_SET);
 8003b70:	2201      	movs	r2, #1
 8003b72:	2120      	movs	r1, #32
 8003b74:	482a      	ldr	r0, [pc, #168]	; (8003c20 <main+0x124>)
 8003b76:	f7fd f8ff 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV2_EN_GPIO_Port, DRV2_EN_Pin, GPIO_PIN_SET);
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	4828      	ldr	r0, [pc, #160]	; (8003c20 <main+0x124>)
 8003b80:	f7fd f8fa 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV3_EN_GPIO_Port, DRV3_EN_Pin, GPIO_PIN_SET);
 8003b84:	2201      	movs	r2, #1
 8003b86:	2108      	movs	r1, #8
 8003b88:	4824      	ldr	r0, [pc, #144]	; (8003c1c <main+0x120>)
 8003b8a:	f7fd f8f5 	bl	8000d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV4_EN_GPIO_Port, DRV4_EN_Pin, GPIO_PIN_SET);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2110      	movs	r1, #16
 8003b92:	4822      	ldr	r0, [pc, #136]	; (8003c1c <main+0x120>)
 8003b94:	f7fd f8f0 	bl	8000d78 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(DRV1_STATUS_GPIO_Port, DRV1_STATUS_Pin) ||
 8003b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f7fd f8e5 	bl	8000d6c <HAL_GPIO_ReadPin>
 8003ba2:	b130      	cbz	r0, 8003bb2 <main+0xb6>
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003ba4:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003baa:	481d      	ldr	r0, [pc, #116]	; (8003c20 <main+0x124>)
 8003bac:	f7fd f8e4 	bl	8000d78 <HAL_GPIO_WritePin>
 8003bb0:	e7f2      	b.n	8003b98 <main+0x9c>
		 HAL_GPIO_ReadPin(DRV2_STATUS_GPIO_Port, DRV2_STATUS_Pin) ||
 8003bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bb6:	4817      	ldr	r0, [pc, #92]	; (8003c14 <main+0x118>)
 8003bb8:	f7fd f8d8 	bl	8000d6c <HAL_GPIO_ReadPin>
	  if(HAL_GPIO_ReadPin(DRV1_STATUS_GPIO_Port, DRV1_STATUS_Pin) ||
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d1f1      	bne.n	8003ba4 <main+0xa8>
		 HAL_GPIO_ReadPin(DRV3_STATUS_GPIO_Port, DRV3_STATUS_Pin) ||
 8003bc0:	2108      	movs	r1, #8
 8003bc2:	4815      	ldr	r0, [pc, #84]	; (8003c18 <main+0x11c>)
 8003bc4:	f7fd f8d2 	bl	8000d6c <HAL_GPIO_ReadPin>
		 HAL_GPIO_ReadPin(DRV2_STATUS_GPIO_Port, DRV2_STATUS_Pin) ||
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d1eb      	bne.n	8003ba4 <main+0xa8>
		 HAL_GPIO_ReadPin(DRV4_STATUS_GPIO_Port, DRV4_STATUS_Pin) ||
 8003bcc:	2110      	movs	r1, #16
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f7fd f8cc 	bl	8000d6c <HAL_GPIO_ReadPin>
		 HAL_GPIO_ReadPin(DRV3_STATUS_GPIO_Port, DRV3_STATUS_Pin) ||
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <main+0xa8>
		 HAL_GPIO_ReadPin(DRV1_FAULT_GPIO_Port, DRV1_FAULT_Pin) ||
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7fd f8c6 	bl	8000d6c <HAL_GPIO_ReadPin>
		 HAL_GPIO_ReadPin(DRV4_STATUS_GPIO_Port, DRV4_STATUS_Pin) ||
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d1df      	bne.n	8003ba4 <main+0xa8>
		 HAL_GPIO_ReadPin(DRV2_FAULT_GPIO_Port, DRV2_FAULT_Pin) ||
 8003be4:	2110      	movs	r1, #16
 8003be6:	480e      	ldr	r0, [pc, #56]	; (8003c20 <main+0x124>)
 8003be8:	f7fd f8c0 	bl	8000d6c <HAL_GPIO_ReadPin>
		 HAL_GPIO_ReadPin(DRV1_FAULT_GPIO_Port, DRV1_FAULT_Pin) ||
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d1d9      	bne.n	8003ba4 <main+0xa8>
		 HAL_GPIO_ReadPin(DRV3_FAULT_GPIO_Port, DRV3_FAULT_Pin) ||
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	480b      	ldr	r0, [pc, #44]	; (8003c20 <main+0x124>)
 8003bf4:	f7fd f8ba 	bl	8000d6c <HAL_GPIO_ReadPin>
		 HAL_GPIO_ReadPin(DRV2_FAULT_GPIO_Port, DRV2_FAULT_Pin) ||
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d1d3      	bne.n	8003ba4 <main+0xa8>
		 HAL_GPIO_ReadPin(DRV4_FAULT_GPIO_Port, DRV4_FAULT_Pin))
 8003bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7fd f8b3 	bl	8000d6c <HAL_GPIO_ReadPin>
		 HAL_GPIO_ReadPin(DRV3_FAULT_GPIO_Port, DRV3_FAULT_Pin) ||
 8003c06:	4602      	mov	r2, r0
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d1cb      	bne.n	8003ba4 <main+0xa8>
 8003c0c:	e7cb      	b.n	8003ba6 <main+0xaa>
 8003c0e:	bf00      	nop
 8003c10:	58020000 	.word	0x58020000
 8003c14:	58020800 	.word	0x58020800
 8003c18:	58021000 	.word	0x58021000
 8003c1c:	58020400 	.word	0x58020400
 8003c20:	58020c00 	.word	0x58020c00

08003c24 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003c24:	e7fe      	b.n	8003c24 <_Error_Handler>
	...

08003c28 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c28:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8003c2a:	4816      	ldr	r0, [pc, #88]	; (8003c84 <MX_SPI1_Init+0x5c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c30:	4915      	ldr	r1, [pc, #84]	; (8003c88 <MX_SPI1_Init+0x60>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c32:	2207      	movs	r2, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c34:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c38:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c3c:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c3e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c40:	6181      	str	r1, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003c42:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003c46:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c4c:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c4e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c50:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003c52:	61c1      	str	r1, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c54:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c56:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c58:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c5a:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003c5c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003c5e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c60:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c62:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003c64:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003c66:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003c68:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003c6a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003c6c:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c6e:	f7fe fc2d 	bl	80024cc <HAL_SPI_Init>
 8003c72:	b128      	cbz	r0, 8003c80 <MX_SPI1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c74:	2152      	movs	r1, #82	; 0x52
 8003c76:	4805      	ldr	r0, [pc, #20]	; (8003c8c <MX_SPI1_Init+0x64>)
  }

}
 8003c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003c7c:	f7ff bfd2 	b.w	8003c24 <_Error_Handler>
 8003c80:	bd08      	pop	{r3, pc}
 8003c82:	bf00      	nop
 8003c84:	200003e8 	.word	0x200003e8
 8003c88:	40013000 	.word	0x40013000
 8003c8c:	080045b4 	.word	0x080045b4

08003c90 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003c90:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8003c92:	4816      	ldr	r0, [pc, #88]	; (8003cec <MX_SPI2_Init+0x5c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c98:	4915      	ldr	r1, [pc, #84]	; (8003cf0 <MX_SPI2_Init+0x60>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c9a:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c9c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ca0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ca4:	2300      	movs	r3, #0
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ca6:	60c2      	str	r2, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ca8:	6181      	str	r1, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003caa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8003cae:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cb4:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb6:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cb8:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003cba:	61c1      	str	r1, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cbc:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cbe:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003cc2:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003cc4:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003cc6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003cc8:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003cca:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003ccc:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003cce:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003cd0:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003cd2:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003cd4:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003cd6:	f7fe fbf9 	bl	80024cc <HAL_SPI_Init>
 8003cda:	b128      	cbz	r0, 8003ce8 <MX_SPI2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003cdc:	2172      	movs	r1, #114	; 0x72
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_SPI2_Init+0x64>)
  }

}
 8003ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003ce4:	f7ff bf9e 	b.w	8003c24 <_Error_Handler>
 8003ce8:	bd08      	pop	{r3, pc}
 8003cea:	bf00      	nop
 8003cec:	20000250 	.word	0x20000250
 8003cf0:	40003800 	.word	0x40003800
 8003cf4:	080045b4 	.word	0x080045b4

08003cf8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003cf8:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8003cfa:	4816      	ldr	r0, [pc, #88]	; (8003d54 <MX_SPI3_Init+0x5c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d00:	4915      	ldr	r1, [pc, #84]	; (8003d58 <MX_SPI3_Init+0x60>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d02:	2207      	movs	r2, #7
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d04:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003d08:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d0c:	2300      	movs	r3, #0
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d0e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003d10:	6181      	str	r1, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d12:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8003d16:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d1c:	6083      	str	r3, [r0, #8]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1e:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d20:	6143      	str	r3, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d22:	61c1      	str	r1, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d24:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d26:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d2a:	6342      	str	r2, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d2c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d2e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d30:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d32:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d34:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d36:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d38:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d3a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003d3c:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003d3e:	f7fe fbc5 	bl	80024cc <HAL_SPI_Init>
 8003d42:	b128      	cbz	r0, 8003d50 <MX_SPI3_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d44:	2192      	movs	r1, #146	; 0x92
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <MX_SPI3_Init+0x64>)
  }

}
 8003d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003d4c:	f7ff bf6a 	b.w	8003c24 <_Error_Handler>
 8003d50:	bd08      	pop	{r3, pc}
 8003d52:	bf00      	nop
 8003d54:	200002d8 	.word	0x200002d8
 8003d58:	40003c00 	.word	0x40003c00
 8003d5c:	080045b4 	.word	0x080045b4

08003d60 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003d60:	b508      	push	{r3, lr}

  hspi4.Instance = SPI4;
 8003d62:	4816      	ldr	r0, [pc, #88]	; (8003dbc <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003d64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d68:	4915      	ldr	r1, [pc, #84]	; (8003dc0 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d6a:	2207      	movs	r2, #7
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003d6c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003d70:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003d74:	2300      	movs	r3, #0
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d76:	60c2      	str	r2, [r0, #12]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003d78:	6181      	str	r1, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d7a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 7;
 8003d7e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003d84:	6083      	str	r3, [r0, #8]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d86:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d88:	6143      	str	r3, [r0, #20]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d8a:	61c1      	str	r1, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d8c:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d8e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d90:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d92:	6342      	str	r2, [r0, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d94:	6383      	str	r3, [r0, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d96:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d98:	6403      	str	r3, [r0, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d9a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d9c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d9e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003da0:	6503      	str	r3, [r0, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003da2:	6543      	str	r3, [r0, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003da4:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003da6:	f7fe fb91 	bl	80024cc <HAL_SPI_Init>
 8003daa:	b128      	cbz	r0, 8003db8 <MX_SPI4_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003dac:	21b2      	movs	r1, #178	; 0xb2
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <MX_SPI4_Init+0x64>)
  }

}
 8003db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003db4:	f7ff bf36 	b.w	8003c24 <_Error_Handler>
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000360 	.word	0x20000360
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	080045b4 	.word	0x080045b4

08003dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8003dc8:	6803      	ldr	r3, [r0, #0]
 8003dca:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_SPI_MspInit+0x16c>)
 8003dcc:	4293      	cmp	r3, r2
{
 8003dce:	b570      	push	{r4, r5, r6, lr}
 8003dd0:	b08a      	sub	sp, #40	; 0x28
  if(spiHandle->Instance==SPI1)
 8003dd2:	d123      	bne.n	8003e1c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dd4:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_SPI_MspInit+0x170>)
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd8:	a905      	add	r1, sp, #20
 8003dda:	4858      	ldr	r0, [pc, #352]	; (8003f3c <HAL_SPI_MspInit+0x174>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ddc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003de0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003de4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	9407      	str	r4, [sp, #28]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003df8:	23e0      	movs	r3, #224	; 0xe0
 8003dfa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e00:	2305      	movs	r3, #5
 8003e02:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e04:	f7fc fec8 	bl	8000b98 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003e08:	2023      	movs	r0, #35	; 0x23
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	f7fc fc43 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e12:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003e14:	f7fc fc78 	bl	8000708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003e18:	b00a      	add	sp, #40	; 0x28
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 8003e1c:	4a48      	ldr	r2, [pc, #288]	; (8003f40 <HAL_SPI_MspInit+0x178>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d134      	bne.n	8003e8c <HAL_SPI_MspInit+0xc4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e22:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e26:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e28:	2605      	movs	r6, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e2a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e2e:	a905      	add	r1, sp, #20
 8003e30:	4844      	ldr	r0, [pc, #272]	; (8003f44 <HAL_SPI_MspInit+0x17c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e36:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e3e:	9505      	str	r5, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	9407      	str	r4, [sp, #28]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e48:	9302      	str	r3, [sp, #8]
 8003e4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e4e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e50:	f7fc fea2 	bl	8000b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e58:	a905      	add	r1, sp, #20
 8003e5a:	483b      	ldr	r0, [pc, #236]	; (8003f48 <HAL_SPI_MspInit+0x180>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e64:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f7fc fe97 	bl	8000b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e6a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e6c:	a905      	add	r1, sp, #20
 8003e6e:	4837      	ldr	r0, [pc, #220]	; (8003f4c <HAL_SPI_MspInit+0x184>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e70:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e76:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e78:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e7a:	f7fc fe8d 	bl	8000b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003e7e:	2024      	movs	r0, #36	; 0x24
 8003e80:	4622      	mov	r2, r4
 8003e82:	4621      	mov	r1, r4
 8003e84:	f7fc fc08 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003e88:	2024      	movs	r0, #36	; 0x24
 8003e8a:	e7c3      	b.n	8003e14 <HAL_SPI_MspInit+0x4c>
  else if(spiHandle->Instance==SPI3)
 8003e8c:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <HAL_SPI_MspInit+0x188>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d12c      	bne.n	8003eec <HAL_SPI_MspInit+0x124>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e98:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003e9a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	482a      	ldr	r0, [pc, #168]	; (8003f48 <HAL_SPI_MspInit+0x180>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	9506      	str	r5, [sp, #24]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb4:	9408      	str	r4, [sp, #32]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eb6:	9303      	str	r3, [sp, #12]
 8003eb8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eba:	2304      	movs	r3, #4
 8003ebc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec2:	f7fc fe69 	bl	8000b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ec6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eca:	a905      	add	r1, sp, #20
 8003ecc:	481d      	ldr	r0, [pc, #116]	; (8003f44 <HAL_SPI_MspInit+0x17c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ece:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ed0:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ed4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eda:	f7fc fe5d 	bl	8000b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003ede:	2033      	movs	r0, #51	; 0x33
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	f7fc fbd8 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003ee8:	2033      	movs	r0, #51	; 0x33
 8003eea:	e793      	b.n	8003e14 <HAL_SPI_MspInit+0x4c>
  else if(spiHandle->Instance==SPI4)
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_SPI_MspInit+0x18c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d192      	bne.n	8003e18 <HAL_SPI_MspInit+0x50>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ef6:	a905      	add	r1, sp, #20
 8003ef8:	4817      	ldr	r0, [pc, #92]	; (8003f58 <HAL_SPI_MspInit+0x190>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003efa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	9408      	str	r4, [sp, #32]
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003f16:	2364      	movs	r3, #100	; 0x64
 8003f18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003f1e:	2305      	movs	r3, #5
 8003f20:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f22:	f7fc fe39 	bl	8000b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003f26:	2054      	movs	r0, #84	; 0x54
 8003f28:	4622      	mov	r2, r4
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	f7fc fbb4 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003f30:	2054      	movs	r0, #84	; 0x54
 8003f32:	e76f      	b.n	8003e14 <HAL_SPI_MspInit+0x4c>
 8003f34:	40013000 	.word	0x40013000
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	58020000 	.word	0x58020000
 8003f40:	40003800 	.word	0x40003800
 8003f44:	58020800 	.word	0x58020800
 8003f48:	58020400 	.word	0x58020400
 8003f4c:	58020c00 	.word	0x58020c00
 8003f50:	40003c00 	.word	0x40003c00
 8003f54:	40013400 	.word	0x40013400
 8003f58:	58021000 	.word	0x58021000

08003f5c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <HAL_MspInit+0x7c>)
{
 8003f5e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f60:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f64:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	f042 0202 	orr.w	r2, r2, #2
 8003f6a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7a:	f7fc fb7b 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f06f 000b 	mvn.w	r0, #11
 8003f84:	4611      	mov	r1, r2
 8003f86:	f7fc fb87 	bl	8000698 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f06f 000a 	mvn.w	r0, #10
 8003f90:	4611      	mov	r1, r2
 8003f92:	f7fc fb81 	bl	8000698 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	f06f 0009 	mvn.w	r0, #9
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	f7fc fb7b 	bl	8000698 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f06f 0004 	mvn.w	r0, #4
 8003fa8:	4611      	mov	r1, r2
 8003faa:	f7fc fb75 	bl	8000698 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f06f 0003 	mvn.w	r0, #3
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	f7fc fb6f 	bl	8000698 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f06f 0001 	mvn.w	r0, #1
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	f7fc fb69 	bl	8000698 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fcc:	4611      	mov	r1, r2
 8003fce:	f7fc fb63 	bl	8000698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fd2:	b003      	add	sp, #12
 8003fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fd8:	58024400 	.word	0x58024400

08003fdc <NMI_Handler>:
 8003fdc:	4770      	bx	lr

08003fde <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003fde:	e7fe      	b.n	8003fde <HardFault_Handler>

08003fe0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003fe0:	e7fe      	b.n	8003fe0 <MemManage_Handler>

08003fe2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003fe2:	e7fe      	b.n	8003fe2 <BusFault_Handler>

08003fe4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003fe4:	e7fe      	b.n	8003fe4 <UsageFault_Handler>

08003fe6 <SVC_Handler>:
 8003fe6:	4770      	bx	lr

08003fe8 <DebugMon_Handler>:
 8003fe8:	4770      	bx	lr

08003fea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003fea:	4770      	bx	lr

08003fec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003fec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fee:	f7fc fb2f 	bl	8000650 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003ff6:	f7fc bbb8 	b.w	800076a <HAL_SYSTICK_IRQHandler>
	...

08003ffc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <SPI1_IRQHandler+0x8>)
 8003ffe:	f7fe bc0f 	b.w	8002820 <HAL_SPI_IRQHandler>
 8004002:	bf00      	nop
 8004004:	200003e8 	.word	0x200003e8

08004008 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004008:	4801      	ldr	r0, [pc, #4]	; (8004010 <SPI2_IRQHandler+0x8>)
 800400a:	f7fe bc09 	b.w	8002820 <HAL_SPI_IRQHandler>
 800400e:	bf00      	nop
 8004010:	20000250 	.word	0x20000250

08004014 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004014:	4801      	ldr	r0, [pc, #4]	; (800401c <SPI3_IRQHandler+0x8>)
 8004016:	f7fe bc03 	b.w	8002820 <HAL_SPI_IRQHandler>
 800401a:	bf00      	nop
 800401c:	200002d8 	.word	0x200002d8

08004020 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <SPI4_IRQHandler+0x8>)
 8004022:	f7fe bbfd 	b.w	8002820 <HAL_SPI_IRQHandler>
 8004026:	bf00      	nop
 8004028:	20000360 	.word	0x20000360

0800402c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800402c:	4914      	ldr	r1, [pc, #80]	; (8004080 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800402e:	4815      	ldr	r0, [pc, #84]	; (8004084 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004030:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8004038:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <SystemInit+0x5c>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800404c:	681c      	ldr	r4, [r3, #0]
 800404e:	4020      	ands	r0, r4
 8004050:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004052:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004054:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004056:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004058:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800405e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004062:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004066:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800406e:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004070:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8004072:	2201      	movs	r2, #1
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <SystemInit+0x60>)
 8004076:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8004078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800407c:	608b      	str	r3, [r1, #8]
 800407e:	bd10      	pop	{r4, pc}
 8004080:	e000ed00 	.word	0xe000ed00
 8004084:	eaf6ed7f 	.word	0xeaf6ed7f
 8004088:	58024400 	.word	0x58024400
 800408c:	51008108 	.word	0x51008108

08004090 <tmc6200_init>:
#include "spi.h"

void tmc6200_init(uint8_t drv)
{
	uint8_t data[5];
	data[0] = WRITE | 0x00;
 8004090:	2380      	movs	r3, #128	; 0x80
{
 8004092:	b507      	push	{r0, r1, r2, lr}
	data[0] = WRITE | 0x00;
 8004094:	f88d 3000 	strb.w	r3, [sp]
	data[1] = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = 0;
 800409e:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = 0;
 80040a2:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = 0b00110000; // single line control: off, current amplification: 20
 80040a6:	2330      	movs	r3, #48	; 0x30
 80040a8:	f88d 3004 	strb.w	r3, [sp, #4]

	switch(drv)
 80040ac:	2803      	cmp	r0, #3
 80040ae:	d815      	bhi.n	80040dc <tmc6200_init+0x4c>
 80040b0:	e8df f000 	tbb	[pc, r0]
 80040b4:	38271702 	.word	0x38271702
	{
		case 0:
			HAL_GPIO_WritePin(DRV1_CSN_DRV_GPIO_Port, DRV1_CSN_DRV_Pin, GPIO_PIN_RESET);
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040be:	4820      	ldr	r0, [pc, #128]	; (8004140 <tmc6200_init+0xb0>)
 80040c0:	f7fc fe5a 	bl	8000d78 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, data, 5, 10000000);
 80040c4:	2205      	movs	r2, #5
 80040c6:	4669      	mov	r1, sp
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <tmc6200_init+0xb4>)
 80040ca:	481f      	ldr	r0, [pc, #124]	; (8004148 <tmc6200_init+0xb8>)
 80040cc:	f7fe fa8a 	bl	80025e4 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(DRV1_CSN_DRV_GPIO_Port, DRV1_CSN_DRV_Pin, GPIO_PIN_SET);
 80040d0:	2201      	movs	r2, #1
 80040d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			break;
		case 1:
			HAL_GPIO_WritePin(DRV2_CSN_DRV_GPIO_Port, DRV2_CSN_DRV_Pin, GPIO_PIN_RESET);
			HAL_SPI_Transmit(&hspi2, data, 5, 10000000);
			HAL_GPIO_WritePin(DRV2_CSN_DRV_GPIO_Port, DRV2_CSN_DRV_Pin, GPIO_PIN_SET);
 80040d6:	481a      	ldr	r0, [pc, #104]	; (8004140 <tmc6200_init+0xb0>)
			HAL_GPIO_WritePin(DRV3_CSN_DRV_GPIO_Port, DRV3_CSN_DRV_Pin, GPIO_PIN_SET);
			break;
		case 3:
			HAL_GPIO_WritePin(DRV4_CSN_DRV_GPIO_Port, DRV4_CSN_DRV_Pin, GPIO_PIN_RESET);
			HAL_SPI_Transmit(&hspi4, data, 5, 10000000);
			HAL_GPIO_WritePin(DRV4_CSN_DRV_GPIO_Port, DRV4_CSN_DRV_Pin, GPIO_PIN_SET);
 80040d8:	f7fc fe4e 	bl	8000d78 <HAL_GPIO_WritePin>
			break;
	}
}
 80040dc:	b003      	add	sp, #12
 80040de:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_GPIO_WritePin(DRV2_CSN_DRV_GPIO_Port, DRV2_CSN_DRV_Pin, GPIO_PIN_RESET);
 80040e2:	2200      	movs	r2, #0
 80040e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040e8:	4815      	ldr	r0, [pc, #84]	; (8004140 <tmc6200_init+0xb0>)
 80040ea:	f7fc fe45 	bl	8000d78 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, data, 5, 10000000);
 80040ee:	2205      	movs	r2, #5
 80040f0:	4669      	mov	r1, sp
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <tmc6200_init+0xb4>)
 80040f4:	4815      	ldr	r0, [pc, #84]	; (800414c <tmc6200_init+0xbc>)
 80040f6:	f7fe fa75 	bl	80025e4 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(DRV2_CSN_DRV_GPIO_Port, DRV2_CSN_DRV_Pin, GPIO_PIN_SET);
 80040fa:	2201      	movs	r2, #1
 80040fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004100:	e7e9      	b.n	80040d6 <tmc6200_init+0x46>
			HAL_GPIO_WritePin(DRV3_CSN_DRV_GPIO_Port, DRV3_CSN_DRV_Pin, GPIO_PIN_RESET);
 8004102:	2200      	movs	r2, #0
 8004104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004108:	4811      	ldr	r0, [pc, #68]	; (8004150 <tmc6200_init+0xc0>)
 800410a:	f7fc fe35 	bl	8000d78 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi3, data, 5, 10000000);
 800410e:	2205      	movs	r2, #5
 8004110:	4669      	mov	r1, sp
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <tmc6200_init+0xb4>)
 8004114:	480f      	ldr	r0, [pc, #60]	; (8004154 <tmc6200_init+0xc4>)
 8004116:	f7fe fa65 	bl	80025e4 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(DRV3_CSN_DRV_GPIO_Port, DRV3_CSN_DRV_Pin, GPIO_PIN_SET);
 800411a:	2201      	movs	r2, #1
 800411c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			HAL_GPIO_WritePin(DRV4_CSN_DRV_GPIO_Port, DRV4_CSN_DRV_Pin, GPIO_PIN_SET);
 8004120:	480b      	ldr	r0, [pc, #44]	; (8004150 <tmc6200_init+0xc0>)
 8004122:	e7d9      	b.n	80040d8 <tmc6200_init+0x48>
			HAL_GPIO_WritePin(DRV4_CSN_DRV_GPIO_Port, DRV4_CSN_DRV_Pin, GPIO_PIN_RESET);
 8004124:	2200      	movs	r2, #0
 8004126:	2101      	movs	r1, #1
 8004128:	4809      	ldr	r0, [pc, #36]	; (8004150 <tmc6200_init+0xc0>)
 800412a:	f7fc fe25 	bl	8000d78 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi4, data, 5, 10000000);
 800412e:	2205      	movs	r2, #5
 8004130:	4669      	mov	r1, sp
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <tmc6200_init+0xb4>)
 8004134:	4808      	ldr	r0, [pc, #32]	; (8004158 <tmc6200_init+0xc8>)
 8004136:	f7fe fa55 	bl	80025e4 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(DRV4_CSN_DRV_GPIO_Port, DRV4_CSN_DRV_Pin, GPIO_PIN_SET);
 800413a:	2201      	movs	r2, #1
 800413c:	4611      	mov	r1, r2
 800413e:	e7ef      	b.n	8004120 <tmc6200_init+0x90>
 8004140:	58020c00 	.word	0x58020c00
 8004144:	00989680 	.word	0x00989680
 8004148:	200003e8 	.word	0x200003e8
 800414c:	20000250 	.word	0x20000250
 8004150:	58020800 	.word	0x58020800
 8004154:	200002d8 	.word	0x200002d8
 8004158:	20000360 	.word	0x20000360

0800415c <MX_UART4_Init>:
USART_HandleTypeDef husart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800415c:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 800415e:	480f      	ldr	r0, [pc, #60]	; (800419c <MX_UART4_Init+0x40>)
  huart4.Init.BaudRate = 115200;
 8004160:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_UART4_Init+0x44>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004166:	220c      	movs	r2, #12
  huart4.Init.BaudRate = 115200;
 8004168:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800416c:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800416e:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004170:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004172:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004174:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004178:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800417a:	6203      	str	r3, [r0, #32]
  huart4.Init.Prescaler = UART_PRESCALER_DIV1;
 800417c:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 800417e:	6283      	str	r3, [r0, #40]	; 0x28
  huart4.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8004180:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart4.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8004182:	6303      	str	r3, [r0, #48]	; 0x30
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004184:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004186:	f7fe ffb5 	bl	80030f4 <HAL_UART_Init>
 800418a:	b128      	cbz	r0, 8004198 <MX_UART4_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800418c:	214b      	movs	r1, #75	; 0x4b
 800418e:	4805      	ldr	r0, [pc, #20]	; (80041a4 <MX_UART4_Init+0x48>)
  }

}
 8004190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004194:	f7ff bd46 	b.w	8003c24 <_Error_Handler>
 8004198:	bd08      	pop	{r3, pc}
 800419a:	bf00      	nop
 800419c:	20000650 	.word	0x20000650
 80041a0:	40004c00 	.word	0x40004c00
 80041a4:	080045d1 	.word	0x080045d1

080041a8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80041a8:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 80041aa:	480f      	ldr	r0, [pc, #60]	; (80041e8 <MX_UART7_Init+0x40>)
  huart7.Init.BaudRate = 115200;
 80041ac:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <MX_UART7_Init+0x44>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 80041b2:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 115200;
 80041b4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041b8:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 80041ba:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041bc:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80041be:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80041c0:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c2:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80041c4:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041c6:	6203      	str	r3, [r0, #32]
  huart7.Init.Prescaler = UART_PRESCALER_DIV1;
 80041c8:	6243      	str	r3, [r0, #36]	; 0x24
  huart7.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 80041ca:	6283      	str	r3, [r0, #40]	; 0x28
  huart7.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80041cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart7.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 80041ce:	6303      	str	r3, [r0, #48]	; 0x30
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041d0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80041d2:	f7fe ff8f 	bl	80030f4 <HAL_UART_Init>
 80041d6:	b128      	cbz	r0, 80041e4 <MX_UART7_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80041d8:	2163      	movs	r1, #99	; 0x63
 80041da:	4805      	ldr	r0, [pc, #20]	; (80041f0 <MX_UART7_Init+0x48>)
  }

}
 80041dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80041e0:	f7ff bd20 	b.w	8003c24 <_Error_Handler>
 80041e4:	bd08      	pop	{r3, pc}
 80041e6:	bf00      	nop
 80041e8:	20000470 	.word	0x20000470
 80041ec:	40007800 	.word	0x40007800
 80041f0:	080045d1 	.word	0x080045d1

080041f4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80041f4:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 80041f6:	480f      	ldr	r0, [pc, #60]	; (8004234 <MX_UART8_Init+0x40>)
  huart8.Init.BaudRate = 115200;
 80041f8:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <MX_UART8_Init+0x44>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 80041fe:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 115200;
 8004200:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004204:	2300      	movs	r3, #0
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004206:	6142      	str	r2, [r0, #20]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004208:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800420a:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800420c:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800420e:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004210:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004212:	6203      	str	r3, [r0, #32]
  huart8.Init.Prescaler = UART_PRESCALER_DIV1;
 8004214:	6243      	str	r3, [r0, #36]	; 0x24
  huart8.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8004216:	6283      	str	r3, [r0, #40]	; 0x28
  huart8.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8004218:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart8.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 800421a:	6303      	str	r3, [r0, #48]	; 0x30
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800421c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800421e:	f7fe ff69 	bl	80030f4 <HAL_UART_Init>
 8004222:	b128      	cbz	r0, 8004230 <MX_UART8_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004224:	217b      	movs	r1, #123	; 0x7b
 8004226:	4805      	ldr	r0, [pc, #20]	; (800423c <MX_UART8_Init+0x48>)
  }

}
 8004228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800422c:	f7ff bcfa 	b.w	8003c24 <_Error_Handler>
 8004230:	bd08      	pop	{r3, pc}
 8004232:	bf00      	nop
 8004234:	20000570 	.word	0x20000570
 8004238:	40007c00 	.word	0x40007c00
 800423c:	080045d1 	.word	0x080045d1

08004240 <MX_USART2_Init>:
/* USART2 init function */
void MX_USART2_Init(void)
{

  husart2.Instance = USART2;
 8004240:	4810      	ldr	r0, [pc, #64]	; (8004284 <MX_USART2_Init+0x44>)
  husart2.Init.BaudRate = 115200;
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
  husart2.Init.StopBits = USART_STOPBITS_1;
  husart2.Init.Parity = USART_PARITY_NONE;
  husart2.Init.Mode = USART_MODE_TX_RX;
 8004242:	220c      	movs	r2, #12
{
 8004244:	b508      	push	{r3, lr}
  husart2.Init.BaudRate = 115200;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <MX_USART2_Init+0x48>)
 8004248:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  husart2.Init.Mode = USART_MODE_TX_RX;
 800424c:	6142      	str	r2, [r0, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  husart2.Init.Prescaler = USART_PRESCALER_DIV1;
  husart2.Init.NSS = USART_NSS_SW;
 800424e:	2208      	movs	r2, #8
  husart2.Init.BaudRate = 115200;
 8004250:	e880 4008 	stmia.w	r0, {r3, lr}
  husart2.Init.NSS = USART_NSS_SW;
 8004254:	6282      	str	r2, [r0, #40]	; 0x28
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8004256:	2300      	movs	r3, #0
  husart2.Init.SlaveMode = USART_SLAVEMODE_ENABLE;
 8004258:	2201      	movs	r2, #1
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800425a:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800425c:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800425e:	6103      	str	r3, [r0, #16]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8004260:	6183      	str	r3, [r0, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8004262:	61c3      	str	r3, [r0, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8004264:	6203      	str	r3, [r0, #32]
  husart2.Init.Prescaler = USART_PRESCALER_DIV1;
 8004266:	6243      	str	r3, [r0, #36]	; 0x24
  husart2.Init.SlaveMode = USART_SLAVEMODE_ENABLE;
 8004268:	62c2      	str	r2, [r0, #44]	; 0x2c
  husart2.Init.FIFOMode = USART_FIFOMODE_DISABLE;
 800426a:	6303      	str	r3, [r0, #48]	; 0x30
  husart2.Init.TXFIFOThreshold = USART_TXFIFO_THRESHOLD_1_8;
 800426c:	6343      	str	r3, [r0, #52]	; 0x34
  husart2.Init.RXFIFOThreshold = USART_RXFIFO_THRESHOLD_1_8;
 800426e:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8004270:	f7fe ff98 	bl	80031a4 <HAL_USART_Init>
 8004274:	b128      	cbz	r0, 8004282 <MX_USART2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004276:	2194      	movs	r1, #148	; 0x94
 8004278:	4804      	ldr	r0, [pc, #16]	; (800428c <MX_USART2_Init+0x4c>)
  }

}
 800427a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800427e:	f7ff bcd1 	b.w	8003c24 <_Error_Handler>
 8004282:	bd08      	pop	{r3, pc}
 8004284:	200005f0 	.word	0x200005f0
 8004288:	40004400 	.word	0x40004400
 800428c:	080045d1 	.word	0x080045d1

08004290 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004290:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8004292:	480f      	ldr	r0, [pc, #60]	; (80042d0 <MX_USART3_UART_Init+0x40>)
  huart3.Init.BaudRate = 115200;
 8004294:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <MX_USART3_UART_Init+0x44>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800429a:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800429c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042a0:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042a2:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042a4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042a6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042a8:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042aa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ac:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ae:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 80042b0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 80042b2:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80042b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 80042b6:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042b8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042ba:	f7fe ff1b 	bl	80030f4 <HAL_UART_Init>
 80042be:	b128      	cbz	r0, 80042cc <MX_USART3_UART_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80042c0:	21ad      	movs	r1, #173	; 0xad
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <MX_USART3_UART_Init+0x48>)
  }

}
 80042c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80042c8:	f7ff bcac 	b.w	8003c24 <_Error_Handler>
 80042cc:	bd08      	pop	{r3, pc}
 80042ce:	bf00      	nop
 80042d0:	200004f0 	.word	0x200004f0
 80042d4:	40004800 	.word	0x40004800
 80042d8:	080045d1 	.word	0x080045d1

080042dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80042dc:	6803      	ldr	r3, [r0, #0]
 80042de:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <HAL_UART_MspInit+0xec>)
 80042e0:	4293      	cmp	r3, r2
{
 80042e2:	b500      	push	{lr}
 80042e4:	b08b      	sub	sp, #44	; 0x2c
  if(uartHandle->Instance==UART4)
 80042e6:	d11c      	bne.n	8004322 <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80042e8:	4b38      	ldr	r3, [pc, #224]	; (80043cc <HAL_UART_MspInit+0xf0>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ea:	a905      	add	r1, sp, #20
 80042ec:	4838      	ldr	r0, [pc, #224]	; (80043d0 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80042ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80042f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80042f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80042fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004306:	2303      	movs	r3, #3
 8004308:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004314:	2308      	movs	r3, #8
 8004316:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004318:	f7fc fc3e 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800431c:	b00b      	add	sp, #44	; 0x2c
 800431e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==UART7)
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <HAL_UART_MspInit+0xf8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d119      	bne.n	800435c <HAL_UART_MspInit+0x80>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004328:	4b28      	ldr	r3, [pc, #160]	; (80043cc <HAL_UART_MspInit+0xf0>)
 800432a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800432e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004332:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800433a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800433e:	9302      	str	r3, [sp, #8]
 8004340:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004342:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004346:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004348:	2302      	movs	r3, #2
 800434a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004352:	2307      	movs	r3, #7
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004354:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004356:	a905      	add	r1, sp, #20
 8004358:	481f      	ldr	r0, [pc, #124]	; (80043d8 <HAL_UART_MspInit+0xfc>)
 800435a:	e7dd      	b.n	8004318 <HAL_UART_MspInit+0x3c>
  else if(uartHandle->Instance==UART8)
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_UART_MspInit+0x100>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d115      	bne.n	800438e <HAL_UART_MspInit+0xb2>
    __HAL_RCC_UART8_CLK_ENABLE();
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <HAL_UART_MspInit+0xf0>)
 8004364:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8004368:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800436c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004378:	9303      	str	r3, [sp, #12]
 800437a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800437c:	2303      	movs	r3, #3
 800437e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800438a:	2308      	movs	r3, #8
 800438c:	e7e2      	b.n	8004354 <HAL_UART_MspInit+0x78>
  else if(uartHandle->Instance==USART3)
 800438e:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <HAL_UART_MspInit+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d1c3      	bne.n	800431c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <HAL_UART_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004396:	a905      	add	r1, sp, #20
 8004398:	4812      	ldr	r0, [pc, #72]	; (80043e4 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800439a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800439e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043a2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80043a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	9304      	str	r3, [sp, #16]
 80043b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043c2:	2307      	movs	r3, #7
 80043c4:	9309      	str	r3, [sp, #36]	; 0x24
 80043c6:	e7a7      	b.n	8004318 <HAL_UART_MspInit+0x3c>
 80043c8:	40004c00 	.word	0x40004c00
 80043cc:	58024400 	.word	0x58024400
 80043d0:	58020000 	.word	0x58020000
 80043d4:	40007800 	.word	0x40007800
 80043d8:	58021000 	.word	0x58021000
 80043dc:	40007c00 	.word	0x40007c00
 80043e0:	40004800 	.word	0x40004800
 80043e4:	58020400 	.word	0x58020400

080043e8 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 80043e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART2)
 80043ea:	6802      	ldr	r2, [r0, #0]
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <HAL_USART_MspInit+0x44>)
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d119      	bne.n	8004426 <HAL_USART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_USART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f4:	a901      	add	r1, sp, #4
 80043f6:	480f      	ldr	r0, [pc, #60]	; (8004434 <HAL_USART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80043f8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80043fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004400:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004410:	231c      	movs	r3, #28
 8004412:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004414:	2302      	movs	r3, #2
 8004416:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004418:	2300      	movs	r3, #0
 800441a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800441e:	2307      	movs	r3, #7
 8004420:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004422:	f7fc fbb9 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004426:	b007      	add	sp, #28
 8004428:	f85d fb04 	ldr.w	pc, [sp], #4
 800442c:	40004400 	.word	0x40004400
 8004430:	58024400 	.word	0x58024400
 8004434:	58020000 	.word	0x58020000

08004438 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8004438:	4770      	bx	lr
	...

0800443c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800443c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004442:	e003      	b.n	800444c <LoopCopyDataInit>

08004444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800444a:	3104      	adds	r1, #4

0800444c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800444c:	480b      	ldr	r0, [pc, #44]	; (800447c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004454:	d3f6      	bcc.n	8004444 <CopyDataInit>
  ldr  r2, =_sbss
 8004456:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004458:	e002      	b.n	8004460 <LoopFillZerobss>

0800445a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800445a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800445c:	f842 3b04 	str.w	r3, [r2], #4

08004460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004464:	d3f9      	bcc.n	800445a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004466:	f7ff fde1 	bl	800402c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800446a:	f000 f811 	bl	8004490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800446e:	f7ff fb45 	bl	8003afc <main>
  bx  lr    
 8004472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004474:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004478:	080045f0 	.word	0x080045f0
  ldr  r0, =_sdata
 800447c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004480:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8004484:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8004488:	200006d0 	.word	0x200006d0

0800448c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800448c:	e7fe      	b.n	800448c <ADC3_IRQHandler>
	...

08004490 <__libc_init_array>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4e0d      	ldr	r6, [pc, #52]	; (80044c8 <__libc_init_array+0x38>)
 8004494:	4c0d      	ldr	r4, [pc, #52]	; (80044cc <__libc_init_array+0x3c>)
 8004496:	1ba4      	subs	r4, r4, r6
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	2500      	movs	r5, #0
 800449c:	42a5      	cmp	r5, r4
 800449e:	d109      	bne.n	80044b4 <__libc_init_array+0x24>
 80044a0:	4e0b      	ldr	r6, [pc, #44]	; (80044d0 <__libc_init_array+0x40>)
 80044a2:	4c0c      	ldr	r4, [pc, #48]	; (80044d4 <__libc_init_array+0x44>)
 80044a4:	f000 f818 	bl	80044d8 <_init>
 80044a8:	1ba4      	subs	r4, r4, r6
 80044aa:	10a4      	asrs	r4, r4, #2
 80044ac:	2500      	movs	r5, #0
 80044ae:	42a5      	cmp	r5, r4
 80044b0:	d105      	bne.n	80044be <__libc_init_array+0x2e>
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044b8:	4798      	blx	r3
 80044ba:	3501      	adds	r5, #1
 80044bc:	e7ee      	b.n	800449c <__libc_init_array+0xc>
 80044be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c2:	4798      	blx	r3
 80044c4:	3501      	adds	r5, #1
 80044c6:	e7f2      	b.n	80044ae <__libc_init_array+0x1e>
 80044c8:	080045e8 	.word	0x080045e8
 80044cc:	080045e8 	.word	0x080045e8
 80044d0:	080045e8 	.word	0x080045e8
 80044d4:	080045ec 	.word	0x080045ec

080044d8 <_init>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr

080044e4 <_fini>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr
